# Plot "Observed vs Forecast"
if("forecast" %in% type){
.forecast(x, horizon = horizon, ...)
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
.impact(x, horizon = horizon, ...)
# return(res)
}
}
prova <- plot.cArima(ce, type = "impact")
prova
prova <- plot.cArima(ce, type = "forecast")
prova
plot.cArima(ce, type = "impact")
plot.cArima(ce, type = "forecast")
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
.impact(x, horizon = horizon, ...)
# return(res)
}
}
plot.cArima(ce, type = "forecast")
prova <- plot.cArima(ce, type = "forecast")
prova
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
invisible(.impact(x, horizon = horizon, ...))
# return(res)
}
}
prova <- plot.cArima(ce, type = "impact")
prova
prova <- plot.cArima(ce, type = "forecast")
prova
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
invisible(.impact(x, horizon = horizon, ...))
# return(res)
} return(invisible())
}
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
invisible(.impact(x, horizon = horizon, ...))
# return(res)
} return(invisible())
}
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = c("forecast", "impact"))
prova <- plot(ce, type = c("forecast", "impact"))
prova
prova <- plot(ce, type = c("forecast", "impact"), horizon = horizon)
prova
.plot1 <- function(x){
plot(x, type = "l")
}
.plot2 <- function(x){
plot(2*x, type = "l", col = "blue")
}
plot_method <- function(x, type){
if(type %in% "p1"){
.plot1(x)
}
if(type %in% "p2"){
.plot2(x)
}
}
# esempio
plot_method(rnorm(100), type = "p1")
prova <- plot_method(rnorm(100), type = "p1")
prova <- plot_method(rnorm(100), type = "p2")
plot_method(rnorm(100), type = "p2")
prova <- plot_method(rnorm(100), type = "p2")
plot_method(rnorm(100), type = c("p1","p2"))
plot_method <- function(x, type){
if("p1" %in% type){
.plot1(x)
}
if("p2" %in% type){
.plot2(x)
}
}
# esempio
plot_method(rnorm(100), type = "p1")
plot_method(rnorm(100), type = c("p1","p2"))
plot_method(rnorm(100), type = c("p1","p2"))
prova <- plot_method(rnorm(100), type = c("p1","p2"))
prova
plot_method <- function(x, type){
if("p1" %in% type){
.plot1(x)
}
if("p2" %in% type){
.plot2(x)
}
return(invisible())
}
# esempio
prova <- plot_method(rnorm(100), type = c("p1","p2"))
prova
prova <- plot_method(rnorm(100), type = c("p1"))
prova
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
#return(invisible(res1, res2))
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
prova
.plot1 <- function(x){
invisible(plot(x, type = "l"))
}
.plot2 <- function(x){
invisible(plot(2*x, type = "l", col = "blue"))
}
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
return(res1, res2)
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
#return(res1, res2)
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
prova <- plot_method(rnorm(100), type = "p1")
prova
prova <- plot_method(rnorm(100), type = "p2")
prova
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
return(list(res1, res2))
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
prova
.plot1(rnorm(100))
prova <- .plot1(rnorm(100))
prova
.plot1 <- function(x){
return(invisible(plot(x, type = "l")))
}
prova <- .plot1(rnorm(100))
prova
.plot1 <- function(x){
plot(x, type = "l")
}
prova <- .plot1(rnorm(100))
prova
library(CausalArima)
<- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
prova <- plot(ce, type = "forecast")
prova
prova <- hist(rnorm(100))
prova
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact")
prova <- plot(ce, type = "impact")
prova
plot(ce, type = "impact")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "forecast")
plot(ce, type = "impact")
prova <- plot(ce, type = "impact")
prova
prova <- plot(ce, type = "forecast")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
dev.off()
plot(ce, type = "forecast")
plot(rnorm(100))
plot(ce, type = "forecast")
plot(ce, type = "residuals")
plot(ce, type = "impact")
plot(ce)
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
plot(ce)
g <- plot(ce)
g
plot(ce)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
print(ce)
library(CausalArima)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Print
print(ce, type = "norm")
print(ce, type = "boot", horizon = horizon)
print(ce, type = "boot")
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
# Table of the estimated temporal average effects
impact(ce)
impact(ce, horizon = horizon)
prova <- impact(ce, horizon = horizon)
prova$arima
class(prova)
names(prova)
prova$impact
library(CausalArima)
library(CausalArima)
library(CausalArima)
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
# Table of the estimated temporal average effects
impact(ce)
c_arima_res<-print(x, horizon=horizon)
c_arima_res<-print(ce, horizon=horizon)
c_arima_res
c_arima_res<-print(ce, horizon=NULL)
c_arima_res
summary(ce, horizon = horizon)
c_arima_res<-print(x, horizon=horizon)
c_arima_res<-print(ce, horizon=horizon)
c_arima_res
c_arima_res<-print(ce, horizon=NULL)
c_arima_res
class(c_arima_res)
as.matrix(c_arima_res)
dim(as.matrix(c_arima_res))
class(summary(ce))
prova <- matrix(as.matrix(c_arima_res), now = 1, ncol = 15)
prova <- matrix(as.matrix(c_arima_res), nrow = 1, ncol = 15)
prova
c_arima_res
names(c_arima_res)
length(c_arima_res)
library(CausalArima)
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
# Table of the estimated temporal average effects
impact(ce)
summary(ce)
summary(ce, horizon = horizon)
summary.cArima<- function(x, type = "norm", horizon = NULL, digits = 3){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
# summary
sumryy <- print(x, type = type, horizon = horizon)
ind1 <- which(names(sumryy) == "tau"):which(names(sumryy) == "pvalue.tau.r")
ind2 <- which(names(sumryy) == "sum"):which(names(sumryy) == "pvalue.sum.r")
ind3 <- which(names(sumryy) == "avg"):which(names(sumryy) == "pvalue.avg.r")
# printing
if(is.numeric(sumryy)){
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[ind1,]), "", as.matrix(sumry[ind2,]), "", as.matrix(sumry[ind3,]))
colnames(obj) <- ""
} else {
sumry <- round(t(sumryy[,-1]), digits = digits)
obj <- rbind(sumry[ind1-1,], "", sumry[ind2-1,], "", sumry[ind3-1,])
colnames(obj) <- paste(sumryy[,1])
}
# setting rownames
nnames <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
if(type == "boot"){
nnames <- nnames[- grep(nnames, pattern = "Standard error")]
}
rownames(obj) <- nnames
#noquote(obj)
}
summary.cArima(ce, horizon = horizon)
summary.cArima<- function(x, type = "norm", horizon = NULL, digits = 3){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
# summary
sumryy <- print(x, type = type, horizon = horizon)
ind1 <- which(names(sumryy) == "tau"):which(names(sumryy) == "pvalue.tau.r")
ind2 <- which(names(sumryy) == "sum"):which(names(sumryy) == "pvalue.sum.r")
ind3 <- which(names(sumryy) == "avg"):which(names(sumryy) == "pvalue.avg.r")
# printing
if(is.numeric(sumryy)){
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[ind1,]), "", as.matrix(sumry[ind2,]), "", as.matrix(sumry[ind3,]))
colnames(obj) <- ""
} else {
sumry <- round(t(sumryy[,-1]), digits = digits)
obj <- rbind(sumry[ind1-1,], "", sumry[ind2-1,], "", sumry[ind3-1,])
colnames(obj) <- paste(sumryy[,1])
}
# setting rownames
nnames <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
if(type == "boot"){
nnames <- nnames[- grep(nnames, pattern = "Standard error")]
}
rownames(obj) <- nnames
obj
}
summary.cArima(ce, horizon = horizon)
as.data.frame(summary.cArima(ce, horizon = horizon))
rbind(c(1,2,3), NULL, c(3,4,5))
rbind(c(1,2,3), "", c(3,4,5))
library(CausalArima)
summary(ce)
library(CausalArima)
summary(ce)
library(CausalArima)
summary(ce)
class(summary(ce))
