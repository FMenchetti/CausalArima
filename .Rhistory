# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
# Table of the estimated temporal average effects
ResultTable(ce, type = "norm", horizon = horizon)
prova <- ResultTable(ce, type = "norm", horizon = horizon)
prova
ResultTable <- function(x, type = "norm", stat = c("tau", "avg", "sum"), direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(print(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star")
# Table
effects <- round(print(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(print(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
return(tab)
}
ResultTable(ce, type = "norm", horizon = horizon)
ResultTable <- function(x, type = "norm", stat = c("tau", "avg", "sum"), direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(print(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star")
# Table
effects <- round(print(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(print(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
cat(tab, sep="\n")
return(tab)
}
ResultTable(ce, type = "norm", horizon = horizon)
ResultTable <- function(x, type = "norm", stat = c("tau", "avg", "sum"), direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(print(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star")
# Table
effects <- round(print(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(print(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
cat(tab, sep="\n")
}
ResultTable(ce, type = "norm", horizon = horizon)
ResultTable <- function(x, type = "norm", stat = c("tau", "avg", "sum"), direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(print(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star")
# Table
effects <- round(print(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(print(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
}
ResultTable(ce, type = "norm", horizon = horizon)
.star <- function(pvalue){
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
ResultTable(ce, type = "norm", horizon = horizon)
horizon
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, type = "boot", horizon = horizon)
ce$boot
summary(ce, type = "norm")
summary(ce, type = "boot")
print(ce, type = "norm")
print.cArima<- function(x, type = "norm", horizon = NULL){
if(!is.null(horizon)){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!all(type %in% c("norm", "boot")))
stop("allowed 'type' values are 'norm' and 'boot'")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
## Settings & removing NA's
int.date <- x$int.date
dates <- x$dates
ind <- which(dates[dates >= int.date][!is.na(x$causal.effect)] %in% horizon)
ncol <- 1 + dim(x[[type]]$inf)[2]
summary <- data.frame(matrix(nrow = length(horizon), ncol = ncol))
colnames(summary) <- c("Time horizon", colnames(x[[type]]$inf))
summary[, 1] <- horizon
summary[, 2:ncol] <- x[[type]]$inf[ind, ]
} else {
h <- dim(x[[type]]$inf)[1]
summary <- x[[type]]$inf[h, ]
}
summary
}
print(ce, type = "norm")
print(ce, type = "boot")
summary(ce, type = "boot")
summary(ce, type = "boot", horizon = horizon)
sumryy <- print(x, type = "boot", horizon = horizon)
sumryy <- print(ce, type = "boot", horizon = horizon)
sumryy
round(t(sumryy[,-1]), digits = 2)
ResultTable(ce, type = "norm", horizon = horizon)
ResultTable(ce, type = "norm", horizon = horizon, printing = T)
ResultTable <- function(x, type = "norm", stat = c("tau", "avg", "sum"), direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(print(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star")
# Table
effects <- round(print(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(print(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
tab
}
ResultTable(ce, type = "norm", horizon = horizon)
tab <- ResultTable(ce, type = "norm", horizon = horizon)
class(tab)
summary(ce, type = "norm")
summary(ce, type = "norm", horizon = horizon)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, type = "norm", horizon = horizon)
library(CausalArima)
library(CausalArima)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, horizon = horizon)
results
results
results
x[[type]]$inf[ind, ]
dim(results)
dim(x[[type]]$inf[ind, ])
summary(ce, horizon = horizon)
summary(ce, horizon = horizon)
results
library(CausalArima)
summary(ce, horizon = horizon)
print(ce, horizon = horizon)
library(CausalArima)
print(ce, horizon = horizon)
summary(ce, horizon = horizon)
sumryy
sumry
x <- ce
type <- "norm"
digits <- 3
# summary
sumryy <- print(x, type = type, horizon = horizon)
# summary
sumryy <- print(x, type = type)
class(sumryy)
# summary
sumryy <- as.matrix(print(x, type = type))
sumryy
sumryy <- print(x, type = type)
sumryy
sumryy <- as.data.frame(sumryy)
sumryy
sumryy <- print(x, type = type, horizon = horizon)
sumry <- as.matrix(round(sumryy, digits = digits))
horizon
class(horizon)
# debug here (i boot non hanno standard error perciò è da uno a 4 i norm da 1 a 5)
sumry <- round(t(sumryy[,-1]), digits = digits)
sumry
sumry["tau":"pvalue.tau.r",]
sumry[1:4]
sumry[1:4,]
sumry["tau":"pvalue.tau.b",]
sumry[c("tau","pvalue.tau.b"),]
ind <- which(rownames(sumry) == "tau"):which(rownames(sumry) == "pvalue.tau.r")
ind
sumry[ind,]
sumryy <- print(x, type = type, horizon = horizon)
sumryy
as.data.frame(sumryy)
matrix(sumryy, nrow = length(horizon), ncol = ncol(sumryy))
matrix(NA, 2, 16)
sumryy <- print(x, type = type)
sumryy
matrix(sumryy, 1, 16)
matrix(sumryy, 1, 15)
data.frame(sumryy, 1, 15)
sumry
sumryy <- print(x, type = type)
sumry
sumryy <- print(x, type = type, horizon = horizon)
sumryy <- print(x, type = type)
sumryy
colnames(sumryy)
names(sumryy)
sumryy <- print(x, type = type, horizon = horizon)
names(sumryy)
ind1 <- which(names(sumryy) == "tau"):which(names(sumryy) == "pvalue.tau.r")
ind2 <- which(names(sumryy) == "sum"):which(names(sumryy) == "pvalue.sum.r")
ind3 <- which(names(sumryy) == "avg"):which(names(sumryy) == "pvalue.avg.r")
sumryy
ind1
ind2
ind3
ind1-1
# debug here (i boot non hanno standard error perciò è da uno a 4 i norm da 1 a 5)
sumry <- round(t(sumryy[,-1]), digits = digits)
sumry
obj <- rbind(sumry[ind1-1,], "", sumry[ind2-1,], "", sumry[ind3-1,])
colnames(obj) <- paste(sumryy[,1])
obj
sumryy[,1]
sumryy <- print(x, type = type)
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[ind1,]), "", as.matrix(sumry[ind2,]), "", as.matrix(sumry[ind3,]))
sumryy
sumry
obj <- rbind(as.matrix(sumry[ind1-1,]), "", as.matrix(sumry[ind2-1,]), "", as.matrix(sumry[ind3-1,]))
obj
type <- "boot"
sumryy <- print(x, type = type)
ind1 <- which(names(sumryy) == "tau"):which(names(sumryy) == "pvalue.tau.r")
ind2 <- which(names(sumryy) == "sum"):which(names(sumryy) == "pvalue.sum.r")
ind3 <- which(names(sumryy) == "avg"):which(names(sumryy) == "pvalue.avg.r")
ind1
ind2
ind3
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[ind1-1,]), "", as.matrix(sumry[ind2-1,]), "", as.matrix(sumry[ind3-1,]))
obj
sumryy <- print(x, type = type, horizon = horizon)
# debug here (i boot non hanno standard error perciò è da uno a 4 i norm da 1 a 5)
sumry <- round(t(sumryy[,-1]), digits = digits)
obj <- rbind(sumry[ind1-1,], "", sumry[ind2-1,], "", sumry[ind3-1,])
colnames(obj) <- paste(sumryy[,1])
rownames(obj) <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
nnames <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
grep(nnames, pattern = "Standard error")
nnames[- grep(nnames, pattern = "Standard error")]
library(CausalArima)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
library(CausalArima)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
print.cArima
library(CausalArima)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
detach("package:CausalArima", unload = TRUE)
library(CausalArima)
print(ce)
print(ce, horizon = horizon)
summary(ce)
summary(ce, horizon = horizon)
print(ce, horizon = horizon, type = "boot")
print(ce, type = "boot")
library(CausalArima)
summary(ce, horizon = horizon)
summary(ce, horizon = horizon, type = "boot")
summary(ce)
obj
summary(ce)
ob
obj
dim(obj)
class(obj)
rownames(obj)
length(rownames(obj))
length(names)
length(nnames)
ind1
sumry
ind2
ind3
obj <- rbind(as.matrix(sumry[ind1,]), "", as.matrix(sumry[ind2,]), "", as.matrix(sumry[ind3,]))
object.size()
obj
summary(ce)
summary(ce)
obj
sumry <- as.matrix(round(sumryy, digits = digits))
sumry
library(CausalArima)
summary(ce)
summary(ce, type = "boot")
summary(ce, type = "boot", horizon = horizon)
summary(ce, horizon = horizon)
library(CausalArima)
summary(ce, horizon = horizon)
print(ce, horizon = horizon)
summary(ce, type = "boot", horizon = horizon)
## Example 1 (daily data, no predictors)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Plot
oldpar <- par(no.readonly = TRUE)
plot(y = y.new, x = dates, type = "l", col = "cadetblue", xlim = c(as.Date("2014-10-01"), tail(dates, 1)))
lines(y = y, x = dates, col = "orange")
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date, boot = 10000)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date, nboot = 10000)
summary(ce)
CoefficientsTable(ce, bootstraping = TRUE, n = 10000)
CoefficientsTable(ce, bootstraping = F, n = 10000)
## Example 2 (weekly data, with predictors)
# Generating a time series of length 800 and a vector of dates
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date, nboot = 10000)
summary(ce)
CoefficientsTable(ce, n = 10000, bootstraping = TRUE, cov = data.frame(x1,x2))
summary(ce, type = "boot")
