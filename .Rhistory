library(CausalArima)
## Example 2 (weekly data, with predictors)
# Generating a time series of length 800 and a vector of dates
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Table of the estimated temporal average effects
table(ce, type = "norm", stat = "avg", horizon = horizon)
100-71+1
table2 <- function(x, type = "norm", stat = "avg", direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!stat %in% c("tau", "sum", "avg")) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
star. <- apply(sumry, 2, FUN = ".star") ## aggiungi tipo paste(^{..})
# Table
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){ # ricontrolla e testa la funzione anche per length(stat) = 1
sd <- round(summary(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits)
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
noquote(tab)
}
table2(ce)
star <- function(pvalue){ # generalizza funzione: l'utente deve poter modificare i livelli di significatività poi ovvio che ci sono dei default)
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
table2(ce)
.star <- function(pvalue){ # generalizza funzione: l'utente deve poter modificare i livelli di significatività poi ovvio che ci sono dei default)
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
table2(ce)
install.packages("CausalMBSTS")
library(CausalArima)
## Example 2 (weekly data, with predictors)
# Generating a time series of length 800 and a vector of dates
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Table of the estimated temporal average effects
table(ce, type = "norm", stat = "avg", horizon = horizon)
.star <- function(pvalue){ # generalizza funzione: l'utente deve poter modificare i livelli di significatività poi ovvio che ci sono dei default)
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
table2 <- function(x, type = "norm", stat = "avg", direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!stat %in% c("tau", "sum", "avg")) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
star. <- apply(sumry, 2, FUN = ".star") ## aggiungi tipo paste(^{..})
# Table
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){ # ricontrolla e testa la funzione anche per length(stat) = 1
sd <- round(summary(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits)
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
noquote(tab)
}
table2(ce, type = "boot", stat = "avg")
table2(ce, type = "norm", stat = "avg")
summary(ce)
direction <- "b"
stat <- "avg"
x <- ce
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
type <- "norm"
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
sumry
stat <- c("avg","sum")
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
sumry
star. <- apply(sumry, 2, FUN = ".star")
star.
table2(ce, type = "norm", stat = c("avg", "sum"))
table2(ce, type = "norm", stat = c("sum", "avg"))
table2(ce, type = "norm", stat = c("sum", "avg", "tau"))
table2(ce, type = "norm", stat = c("tau", sum", "avg"))
stat <- c("tau", "sum", "avg")
table2(ce, type = "norm", stat = stat)
stat %in% c("tau", "sum", "avg")
stat <- c("avg", "sum")
stat %in% c("tau", "sum", "avg")
if(!stat %in% c("tau", "sum", "avg")) {print("no")}
table2 <- function(x, type = "norm", stat = "avg", direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
#if(!stat %in% c("tau", "sum", "avg")) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
star. <- apply(sumry, 2, FUN = ".star") ## aggiungi tipo paste(^{..})
# Table
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){ # ricontrolla e testa la funzione anche per length(stat) = 1
sd <- round(summary(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits)
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
noquote(tab)
}
table2(ce, type = "norm", stat = c("tau", sum", "avg"))
table2(ce, type = "norm", stat = c("tau", sum"))
table2(ce, type = "norm", stat = c("tau", sum"))
table2(ce, type = "norm", stat = c("tau", "sum"))
table2(ce, type = "norm", stat = c("tau", "sum", "avg"))
table2(ce, type = "norm", stat = c("avg"))
if(!all(stat %in% c("tau", "sum", "avg"))) {print("no")}
all(stat %in% c("tau", "sum", "avg"))
stat
stat <- c("avg")
all(stat %in% c("tau", "sum", "avg"))
stat <- "avg"
class(sumry)
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
sumry
sumry <- summary(x, type = type)[, paste("pvalue.", stat, ".", direction, sep = "")]
horizon <- tail(x$dates, 1)
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
sumry
stat <- c("tau", "avg")
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")]
sumry
class(sumry)
sumry <- summary(x, type = type, horizon = horizon)[, paste("pvalue.", "avg", ".", direction, sep = "")]
class(sumry)
stat
stat <- "avg"
if(length(sumry) == 1){
star. <- .star(sumry)
} else {
star. <- apply(sumry, 2, FUN = ".star") ## aggiungi tipo paste(^{..})
}
star.
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
digits <- 2
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
tab
sd <- round(summary(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits)
sd
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
sumry
prova <- as.matrix(sumry)
class(prova)
apply(prova, 2 , FUN = .star)
table2 <- function(x, type = "norm", stat = "avg", direction = "b", horizon = NULL, digits = 2){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star") ## aggiungi tipo paste(^{..})
# Table
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(summary(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
noquote(tab)
}
table2(ce, stat = c("avg", "sum"))
table2(ce, stat = c("avg"))
library(CausalArima)
library(CausalArima)
library(CausalArima)
# Generating a time series of length 800 and a vector of dates
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Table of the estimated temporal average effects
ResultTable(ce, type = "norm", horizon = horizon)
ce2 <- CausalArima(y = ts(y.new, start = start, frequency = 7), auto = TRUE, ic = "bic", dates = dates, int.date = int.date)
# Generating a time series of length 800 and a vector of dates
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Table of the estimated temporal average effects
ResultTable(ce2, type = "norm", horizon = horizon)
compare_models <- function(list.results, type, stat, direction, horizon = NULL, digits = 2, latex = FALSE){
effect.table <- unlist(lapply(lapply(list.results, FUN = table.cArima, type = type, stat = stat,
direction = direction, horizon = horizon, digits = digits), function(x)(t(x))))
if(is.null(horizon)){horizon <- "last day"}
if (type == "norm"){
tab <- matrix(effect.table, nrow = length(list.results)*2, ncol = length(horizon), byrow = TRUE)
} else {
tab <- matrix(effect.table, nrow = length(list.results), ncol = length(horizon), byrow = TRUE)
}
if(latex){
tab1 <- paste("&", apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[1]
for(i in 2:nrow(tab)){
tab1 <- rbind(tab1, paste(apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[i])
}
noquote(tab1)
} else {
colnames(tab) <- paste(horizon)
noquote(tab)
}
}
compare_models(list.results = list(ce, ce2), type = "norm", direction = "b", stat = "sum")
compare_models <- function(list.results, type, stat, direction, horizon = NULL, digits = 2, latex = FALSE){
effect.table <- unlist(lapply(lapply(list.results, FUN = ResultTable, type = type, stat = stat,
direction = direction, horizon = horizon, digits = digits), function(x)(t(x))))
if(is.null(horizon)){horizon <- "last day"}
if (type == "norm"){
tab <- matrix(effect.table, nrow = length(list.results)*2, ncol = length(horizon), byrow = TRUE)
} else {
tab <- matrix(effect.table, nrow = length(list.results), ncol = length(horizon), byrow = TRUE)
}
if(latex){
tab1 <- paste("&", apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[1]
for(i in 2:nrow(tab)){
tab1 <- rbind(tab1, paste(apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[i])
}
noquote(tab1)
} else {
colnames(tab) <- paste(horizon)
noquote(tab)
}
}
compare_models(list.results = list(ce, ce2), type = "norm", direction = "b", stat = "sum")
compare_models <- function(list.results, type, stat, direction, horizon = NULL, digits = 2, latex = FALSE){
effect.table <- unlist(lapply(lapply(list.results, FUN = ResultTable, type = type, stat = stat,
direction = direction, horizon = horizon, digits = digits), function(x)(t(x))))
if(is.null(horizon)){horizon <- tail(list.results[[1]]$dates, 1)}
if (type == "norm"){
tab <- matrix(effect.table, nrow = length(list.results)*2, ncol = length(horizon), byrow = TRUE)
} else {
tab <- matrix(effect.table, nrow = length(list.results), ncol = length(horizon), byrow = TRUE)
}
if(latex){
tab1 <- paste("&", apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[1]
for(i in 2:nrow(tab)){
tab1 <- rbind(tab1, paste(apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[i])
}
noquote(tab1)
} else {
colnames(tab) <- paste(horizon)
noquote(tab)
}
}
compare_models(list.results = list(ce, ce2), type = "norm", direction = "b", stat = "sum")
tail(ce$dates,1)
class(tail(ce$dates,1))
compare_models(list.results = list(ce, ce2), type = "norm", direction = "b", stat = "sum", horizon = horizon)
compare_models(list.results = list(ce, ce2), type = "norm", direction = "b", stat = "sum", horizon = horizon, latex = TRUE)
library(CausalArima)
