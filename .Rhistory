{
x <- stats::diffinv(x, lag = S, differences = ds)
}
#### Answer
x[(nburn + 1) : NROW(innov)]
}
#--------------------------------------------------------------------------------------
.arma.sim <-
function(model, innov = innov)
{
#### Extract orders
p <- length(model$ar)
q <- length(model$ma)
#### Copy
x <- innov
#### MA
if (length(model$ma))
{
x <- stats::filter(x, c(1, model$ma), sides = 1L)
x[seq_along(model$ma)] <- 0
}
#### AR
if (length(model$ar))
{
x <- stats::filter(x, model$ar, method = "recursive")
}
#### Answer
x
}
# ------------------------------------------------------------------------------
.boot.inf <- function(tau, delta, avg, nrep, fit, xreg)
{
#### Settings
nobs <- NROW(fit$x)
k    <- NROW(tau)
nk   <- nobs + k
x1   <- fit$xreg
x2   <- xreg
res <- residuals(fit)
#### Remove NA from res
res <- na.omit(as.numeric(res))
#### Bootstrap residuals
bootm <- as.data.frame(
matrix( sample(x = res, size = nk * nrep, replace = TRUE), nk, nrep ) )
#### Extract ARMA parameters
model <- .Arima.parm(fit)
#### Remap to long format
model.l <- .parm(model = model)
#### Derive the ACF
acvf <- ltsa::tacvfARMA(phi = model.l$ar, theta = -model.l$ma, maxLag = nk-1,
sigma2 = model$sigma2)
sigma2w <- acvf[1]
acf  <- acvf / sigma2w
#### Make Toeplitz matrix and extract
R    <- toeplitz(acf)
ind1 <- 1 : nobs
ind2 <- (nobs+1) : nk
R11  <- R[ind1, ind1]
# R21  <- R[ind2, ind1]
R12  <- R[ind1, ind2]
# R22  <- R[ind2, ind2]
rm(R)
#### Compute
C11  <- chol(R11)
x1t  <- backsolve(r = C11, x = x1, upper.tri = TRUE, transpose = TRUE)
R12t <- backsolve(r = C11, x = R12, upper.tri = TRUE, transpose = TRUE)
At <- (x2 - crossprod(R12t, x1t)) %*% solve( crossprod(x1t), t(x1t) ) + t(R12t)
w1 <- bootm[ind1,]
w2 <- bootm[ind2,]
AtC <- t(backsolve(r = C11, x = t(At)))
#### Stats
boot1 <- matrix(NA, k, nrep)
for(i in 1:nrep){
w <- .arima.sim(model = list(ar = model$ar, ma = model$ma, sar = model$sar, sma = model$sma,
S = model$S), innov = ts(bootm[,i], frequency = model$S), nburn = 0)
boot1[,i] <- w[ind2] - AtC%*%w[ind1]
}
boot2 <- apply(boot1, 2, cumsum)
boot3 <- apply(boot2, 2, FUN = function(x)(x / (seq (1, k, 1))))
#### p-values
pv1.l <- pv1.b <- pv1.r <- pv2.l <- pv2.b <- pv2.r <- pv3.l <- pv3.b <- pv3.r <- rep.int(NA, k)
for (i in 1 : k)
{
stat <- tau[i]
boot <- boot1[i, ]
pv1.l[i] <- mean(boot < stat)
pv1.b[i] <- mean( boot < -abs(stat) | boot > abs(stat) )
pv1.r[i] <- mean(stat < boot)
stat <- delta[i]
boot <- boot2[i, ]
pv2.l[i] <- mean(boot < stat)
pv2.b[i] <- mean( boot < -abs(stat) | boot > abs(stat) )
pv2.r[i] <- mean(stat < boot)
stat <- avg[i]
boot <- boot3[i, ]
pv3.l[i] <- mean(boot < stat)
pv3.b[i] <- mean( boot < -abs(stat) | boot > abs(stat) )
pv3.r[i] <- mean(stat < boot)
}
#### Inference
inf <- cbind(
tau = tau,
pvalue.tau.l = pv1.l, pvalue.tau.b = pv1.b, pvalue.tau.r = pv1.r,
sum = delta,
pvalue.sum.l = pv2.l, pvalue.sum.b = pv2.b, pvalue.sum.r = pv2.r,
avg = avg,
pvalue.avg.l = pv3.l, pvalue.avg.b = pv3.b, pvalue.avg.r = pv3.r)
#### Answer
list(type = "bootstrap", nrep = nrep, inf = inf)
}
########################################################################################
## FUNCTIONS TO CREATE TABLES OF RESULTS: print, ResultTable, effect_table, .star
##
########################################################################################
print.cArima<- function(x, type = "norm", horizon = NULL){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!all(type %in% c("norm", "boot")))
stop("allowed 'type' values are 'norm' and 'boot'")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!is.null(horizon)){
## Settings & removing NA's
int.date <- x$int.date
dates <- x$dates
ind <- which(dates[dates >= int.date][!is.na(x$causal.effect)] %in% horizon)
ncol <- 1 + dim(x[[type]]$inf)[2]
results <- data.frame(matrix(nrow = length(horizon), ncol = ncol))
colnames(results) <- c("Time horizon", colnames(x[[type]]$inf))
results[, 1] <- horizon
results[, 2:ncol] <- x[[type]]$inf[ind, ]
} else {
h <- dim(x[[type]]$inf)[1]
results <- x[[type]]$inf[h, ]
}
results
}
# --------------------------------------------------------------------------------------
effect_table <- function(list.results, type, stat, direction, horizon = NULL, digits = 2, latex = FALSE){
if(is.null(horizon)){horizon <- tail(list.results[[1]]$dates, 1)}
effect.table <- unlist(lapply(lapply(list.results, FUN = ResultTable, type = type, stat = stat,
direction = direction, horizon = horizon, digits = digits), function(x)(t(x))))
if (type == "norm"){
tab <- matrix(effect.table, nrow = length(list.results)*2, ncol = length(horizon), byrow = TRUE)
} else {
tab <- matrix(effect.table, nrow = length(list.results), ncol = length(horizon), byrow = TRUE)
}
if(latex){
tab1 <- paste("&", apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[1]
for(i in 2:nrow(tab)){
tab1 <- rbind(tab1, paste(apply(tab, 1, function(x){paste(x, collapse = " & ")}), " \\")[i])
}
noquote(tab1)
} else {
colnames(tab) <- paste(horizon)
noquote(tab)
}
}
# ------------------------------------------------------------------------------
ResultTable <- function(cArima, type, stat, direction, horizon = NULL, digits = 2){
# Settings
if(is.null(horizon)){ horizon <- tail(cArima$dates, 1)}
tab <- matrix(NA, nrow = 1, ncol = length(horizon))
colnames(tab) <- paste(horizon)
rownames(tab) <- paste(stat)
star. <- .star(print(cArima, type = type, horizon = as.Date(horizon))[, paste0("pvalue.", stat, ".", direction)])
# Table
tab[1,] <- paste(round(print(cArima, type = type, horizon = as.Date(horizon))[, paste(stat)], digits = digits), "^{", star., "}", sep="" )
tab[1,] <- gsub(tab[1,], pattern = "\\^\\{ \\}", replacement = "")
if(type == "norm"){
tab <- rbind(tab, sd = paste("(",round(print(cArima, type = type, horizon = as.Date(horizon))[, paste("sd.", stat, sep = "")], digits = digits),")", sep = ""))
}
noquote(tab)
}
# ------------------------------------------------------------------------------
.star <- function(pvalue){
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
# ------------------------------------------------------------------------------
regarima_table <- function(regarima){
beta <- round(regarima[[1]][["beta"]], 2)
sd <- round(regarima[[1]][["sd"]], 2)
pvalue <- regarima[[1]][["pvalue"]]
res <- rbind(paste0(beta, "^{", .star(pvalue), "}"), paste0("(", sd, ")"))
for(i in 2:length(regarima)){
beta <- round(regarima[[i]][["beta"]], 2)
sd <- round(regarima[[i]][["sd"]], 2)
pvalue <- regarima[[i]][["pvalue"]]
res <- rbind(res, rbind(paste0(beta, "^{", .star(pvalue), "}"), paste0("(", sd, ")")))
}
res <- gsub(res, pattern = "\\^\\{ \\}", replacement = "")
return(noquote(res))
}
prova <- CausalARIMA(y = y.new, dates = dates, int.date = int.date, xreg = NULL)
source("~/GitHub/CausalArima/R/CausalARIMA.R")
library(CausalArima)
source("~/GitHub/CausalArima/R/CausalARIMA.R")
library(CausalArima)
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
xreg <- sales[, "Price"]
# Plot
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,2))
plot(y = y, x = dates, type = "l", main = "Time series of daily sales")
abline(v = int.date, col = "red"); Acf(y, main = "Acf sales")
par(oldpar)
# Causal effect estimation
# The autocorrelation function indicates a weekly sesonal pattern
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
View(sales)
xreg <- sales[,c(3,4,5)]
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
ce <- CausalArima(y = ts(y, frequency = 7), xreg = sales[3:12], int.date = int.date,
dates = dates, nboot = 100)
ce <- CausalArima(y = ts(log(y), frequency = 7), xreg = sales[3:12], int.date = int.date,
dates = dates, nboot = 100)
rm(list=ls())
set.seed(5290)
setwd("C:/Users/fiamm/Documents/Dottorato/Tesi/CSARIMA/Latex/EJ/Major revisions")
######################################################################################
### Loading required libraries & functions
######################################################################################
library(tseries)
library(forecast)
library(ggplot2)
#library(gridExtra)
source('C:/Users/fiamm/Documents/Dottorato/Tesi/CSARIMA/Latex/EJ/Major revisions/Functions.R')
sales <- read.table("sales.csv", header = T, sep = ",")
price <- read.table("price.csv", header = T, sep = ",")
dates <- as.Date(read.table("dates.csv", header = T)[,1])
dummies <- read.table("dummies.csv", header = T, sep = ",")
setwd("C:/Users/fiamm/Documents/Dottorato/Tesi/CSARIMA/Latex/EJ/Major revisions/Replication package/Data")
int.date<-as.Date("2018-10-04", format="%Y-%m-%d")
horizon<-c("2018-11-04","2019-01-04","2019-04-30")
######################################################################################
#  Importing data
######################################################################################
sales <- read.table("sales.csv", header = T, sep = ",")
price <- read.table("price.csv", header = T, sep = ",")
dates <- as.Date(read.table("dates.csv", header = T)[,1])
dummies <- read.table("dummies.csv", header = T, sep = ",")
rm(list=ls())
source("~/GitHub/CausalArima/R/CausalARIMA.R")
library(CausalArima)
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
xreg <- sales[, "Price"]
dim(sales)
reg <- sales[, 3:12]
xreg <- sales[, 3:12]
rm(reg)
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(d=0, D=0, allowmean = FALSE))
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(d=0, D=0, allowmean = FALSE, allowdrift = FALSE))
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(d=0, D=0, allowmean = FALSE, allowdrift = FALSE))
library(CausalArima)
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(d=0, D=0, allowmean = FALSE, allowdrift = FALSE))
prova <- auto.arima(y = sales$Sales, xreg = xreg, allowmean = F, allowdrift = F)
prova <- auto.arima(y = sales$Sales, xreg = as.matrix(xreg), allowmean = F, allowdrift = F)
prova <- auto.arima(y = ts(sales$Sales, frequency = 7), xreg = as.matrix(xreg), allowmean = F, allowdrift = F)
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(d=0, D=0, allowmean = FALSE, allowdrift = FALSE))
prova <- auto.arima(y = ts(sales$Sales[dates<int.date], frequency = 7), xreg = as.matrix(xreg)[dates<int.date,], allowmean = F, allowdrift = F)
rank(xreg)
prova <- auto.arima(y = ts(sales$Sales[dates<int.date], frequency = 7), xreg = as.matrix(xreg)[dates<int.date,], allowmean = F, allowdrift = F, order = c(1,0,1), seasonal = c(1,0,1))
prova <- Arima(y = ts(sales$Sales[dates<int.date], frequency = 7), xreg = as.matrix(xreg)[dates<int.date,], include.mean = F, order = c(1,0,1), seasonal = c(1,0,1))
prova <- Arima(y = ts(sales$Sales[dates<int.date], frequency = 7), xreg = as.matrix(xreg)[dates<int.date,], order = c(1,0,1), seasonal = c(1,0,1))
View(sales)
prova <- Arima(y = ts(sales$Sales[dates<int.date], frequency = 7), xreg = as.matrix(xreg)[dates<int.date,], order = c(1,0,1), include.mean = T, seasonal = c(1,0,1))
prova <- Arima(y = ts(log(sales$Sales[dates<int.date]), frequency = 7), xreg = as.matrix(xreg)[dates<int.date,], order = c(1,0,1), include.mean = T, seasonal = c(1,0,1))
fri <- c(1, sales$thr[-607])
prova <- Arima(y = ts(log(sales$Sales[dates<int.date]), frequency = 7), xreg = as.matrix(cbind(xreg, fri)[dates<int.date,]), order = c(1,0,1), include.mean = FALSE, seasonal = c(1,0,1))
prova <- auto.arima(y = ts(log(sales$Sales[dates<int.date]), frequency = 7), xreg = as.matrix(cbind(xreg, fri)[dates<int.date,]), allowmean = F, allowdrift = F)
prova <- auto.arima(y = ts(log(sales$Sales[dates<int.date]), frequency = 7), xreg = as.matrix(cbind(xreg, fri)[dates<int.date,]), allowmean = T, allowdrift)
setwd("C:/Users/fiamm/Documents/Dottorato/Tesi/CSARIMA/Latex/EJ/Major revisions/Replication package/Data")
sales <- read.table("sales.csv", header = T, sep = ",")
price <- read.table("price.csv", header = T, sep = ",")
dates <- as.Date(read.table("dates.csv", header = T)[,1])
dummies <- read.table("dummies.csv", header = T, sep = ",")
View(dummies)
# Using 'mapply' to vectorize over the lists
impact_store <- mapply(FUN = CausalARIMA, y = yy_store, xreg = xregg_store, order = order_store, seasonal = seasonal_store,
MoreArgs = list(dates = dates, int.date = int.date, auto = FALSE, nboot = 10000,
arima.args = list(include.mean = FALSE)), SIMPLIFY = FALSE)
# Using 'mapply' to vectorize over the lists
impact_store <- mapply(FUN = CausalArima, y = yy_store, xreg = xregg_store, order = order_store, seasonal = seasonal_store,
MoreArgs = list(dates = dates, int.date = int.date, auto = FALSE, nboot = 10000,
arima.args = list(include.mean = FALSE)), SIMPLIFY = FALSE)
y_store <- apply(sales[, grep(colnames(sales), pattern = "TP")], 2, log)
y_store_price <- apply(price[, grep(colnames(price), pattern = "TP")], 2, log)
# Creating lists of arguments to pass to 'mapply'
yy_store <- lapply(seq_len(ncol(y_store)), function(i) ts(y_store[,i], frequency = 7))
xregg_store <- lapply(seq_len(ncol(y_store_price)), function(i) cbind(price = y_store_price[,i], dummies))
order_store <- list(c(1,0,1), c(1,0,1), c(1,0,1), c(2,0,0), c(1,0,1), c(1,0,1), c(1,0,1), c(1,0,2),
c(1,0,1), c(3,0,0), c(1,0,1))
# Using 'mapply' to vectorize over the lists
impact_store <- mapply(FUN = CausalArima, y = yy_store, xreg = xregg_store, order = order_store, seasonal = seasonal_store,
MoreArgs = list(dates = dates, int.date = int.date, auto = FALSE, nboot = 10000,
arima.args = list(include.mean = FALSE)), SIMPLIFY = FALSE)
seasonal_store <- list(c(1,0,0), c(1,0,0), c(1,0,0), c(1,0,0), c(1,0,0), c(0,0,1), c(1,0,0), c(1,0,0),
c(1,0,0), c(1,0,1), c(1,0,1))
# Using 'mapply' to vectorize over the lists
impact_store <- mapply(FUN = CausalArima, y = yy_store, xreg = xregg_store, order = order_store, seasonal = seasonal_store,
MoreArgs = list(dates = dates, int.date = int.date, auto = FALSE, nboot = 10000,
arima.args = list(include.mean = FALSE)), SIMPLIFY = FALSE)
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
f
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
Q
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
# Using 'mapply' to vectorize over the lists
impact_store <- mapply(FUN = CausalArima, y = yy_store, xreg = xregg_store, order = order_store, seasonal = seasonal_store,
MoreArgs = list(dates = dates, int.date = int.date, auto = FALSE, nboot = 10000,
arima.args = list(include.mean = FALSE)), SIMPLIFY = FALSE)
summary(impact_store[[1]], horizon = as.Date(horizon))
horizon<-c("2018-11-04","2019-01-04","2019-04-30")
summary(impact_store[[1]], horizon = as.Date(horizon))
library(CausalArima)
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
xreg <- sales[, 3:12]
View(sales)
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
det(xreg%*%t(xreg))
prova <- as.matrix(xreg) %*% t(as.matrix(xreg))
det(prova)
xreg <- sales[, 4:12]
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(ic = "bic", d = 0, D = 0))
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100, auto.args = list(d = 0, D = 0))
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
source("~/GitHub/CausalArima/R/CausalARIMA.R")
library(CausalArima)
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0), nboot = 100)
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
dim(x2)
View(x2)
fit$coef
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
x2
xreg
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
head(v.tau)
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0), xreg = sales[,4])
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0), xreg = sales[,4])
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0), xreg = sales[,4])
dim(xreg1)
length(xreg1)
xreg <- as.matrix(xreg1)
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0), xreg = sales[,4])
xreg1 <- as.matrix(xreg1)
prova <- apply(xreg1, 2, function(x)(x[!is.na(causal.effect.0)]))
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/CausalARIMA.R")
ce <- CausalArima(y = ts(y, frequency = 7), int.date = int.date,
dates = dates, auto.args = list(d = 0, D = 0))
source("~/GitHub/CausalArima/R/CausalARIMA.R")
