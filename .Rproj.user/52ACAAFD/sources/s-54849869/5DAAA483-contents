######################################################################################
######################################################################################
####  Author: Fiammetta Menchetti                                                 ####
####  Date last update: 2020-03-24                                                ####
####                                                                              ####
####           CAUSAL EFFECT OF A PERMANENT PRICE REBATE ON THE SALES             ####
####                  OF REBATED PRODUCTS AND RELATED                             ####
####                    - Univariate C-SARIMA models  -                           ####
####                                                                              ####
######################################################################################
######################################################################################

rm(list=ls())
setwd("C:/Users/fiamm/Documents/Dottorato/Tesi/CSARIMA")
set.seed(1)
Sys.getlocale()
Sys.setlocale("LC_ALL","English")

######################################################################################
### Loading required libraries
######################################################################################

library(tseries)
library(forecast)
# library(tsoutliers)
# library(expm) 
library(timeDate)
# library(xtable)

######################################################################################
#  Functions
######################################################################################

source('C:/Users/fiamm/Documents/Dottorato/Tesi/mixed-functions.R')
# source('C:/Users/fiamm/Documents/Dottorato/Tesi/SARIMA-CAUSAL.R')
source('C:/Users/fiamm/Documents/Dottorato/Tesi/TSA-SARIMA-20171010.R')
source('C:/Users/fiamm/Documents/Dottorato/Tesi/CSARIMA/funct_new.R')



beta_table <- function(beta.array){
  effect.table <- matrix(NA, nrow = 2*dim(beta.array)[1], ncol = dim(beta.array)[3])
  for( j in 1:dim(beta.array)[3]){
    effect<-c()
    for(i in 1:dim(beta.array)[1]){
      star. <- star(beta.array[i, "tstat", j])
      if(star. == " "){ 
        est <- round(beta.array[i, "coef", j], digits = 2)
      } else {
        est <- paste(round(beta.array[i, "coef", j], digits = 2), "^{", star., "}", sep="" )
        # est <- paste(round(beta.array[i, "coef", j], digits = 2), "$^{", star., "}$", sep="" )
      }
      
      eff2<-rbind(est, paste("(",round(beta.array[i, "se", j], digits = 2),")", sep = ""))
      effect <- rbind(effect, eff2)
    }
    effect.table[,j] <- effect
  }
  effect.table
}

######################################################################################
#  Intervention date and time horizons
######################################################################################

int.date<-as.Date("2018-10-04", format="%Y-%m-%d")
horizon<-c("2018-11-04","2019-01-04","2019-04-30")

######################################################################################
#  Importing data & sanity checks
######################################################################################

# Get data
data.raw<-read.csv("raw.cookies.csv", header=T, sep=";")
TP<-read.table("TP.na.csv", header=T, sep=" ")
TP.mod.price<-read.table("TP.modprice.csv", header=T, sep=" ")
TP.price<-read.table("TP.price.csv",header=T, sep=" ")
SP<-read.table("SP.na.csv", header=T, sep=" ")
SP.price<-read.table("SP.price.csv", header = T, sep=" ")
dates<-as.Date(read.table("tidy.cookies.csv", header=T, sep=" ")[,1], "%Y-%m-%d")

# Checking for negative or zero sales 
sales<-list(TP, SP)

for(i in 1:length(sales)){
  if(sum(sales[[i]] <0, na.rm = T)>0){
    print("In series ",i," N. of negative sales is ", paste(sum(sales[[i]] <0)))
    
  }
  if(sum(sales[[i]] == 0, na.rm=T)>0){
    print(paste("In series ",i, " N. of '0' sales is ", sum(sales[[i]] ==0)))
    for(j in 1:ncol(sales[[i]])){
      ind<-which(sales[[i]][,j]==0)
      sales[[i]][ind,j]<-1
    }
  }
}

# Comment : no negative or zero sales

# dummies
sat<-day.dummy(dates)[,2]
sun<-day.dummy(dates)[,3]
mon<-day.dummy(dates)[,4]
tue<-day.dummy(dates)[,5]
wed<-day.dummy(dates)[,6]
thr<-day.dummy(dates)[,7]
hol<-hol.dummy(dates, add=F, lags = c(1,1))
# hol1 <- hol.dummy(dates, add = F, lags = c(1,0))
# hol2 <- hol.dummy(dates, add = F, lags = c(0,1))

# Sundays in December and last week of November need a second dummy
ind<-weekdays(dates)=="Sunday" & format(dates,"%m")=="12" | 
     weekdays(dates)=="Sunday" & dates %in% c(as.Date("2017-11-26"),as.Date("2018-11-25")) 
dec.sun<-rep(0, times=length(sun))
dec.sun[ind]<-1

# 'hol.dummy' creates a dummy for Italian holidays
# I include manually San Giovanni holiday (all shops in Florence are closed on that day)
ind<-which(dates == "2018-06-24")
hol[ind-1]<-1 ; hol[ind+1]<-1
# hol1[ind-1]<-1 ; hol2[ind+1]<-1


# ----------- change dependent variable here ---------------------------------------

list.cookies<-list(TP=TP,SP=SP)
list.prices <- list(TP.price = TP.mod.price, SP.price = SP.price)

#-----------------------------------------------------------------------------------

#####################################################################################
# Descriptive analysis 
#####################################################################################

# Average market segment price
treat<-gsub(colnames(TP),pattern = "pezzi.",replacement = "")
coop.other<-gsub(colnames(OL),pattern = "pezzi.",replacement = "")

avg.price<-matrix(NA,nrow=nrow(OL),ncol=ncol(OL))
for(i in 1:ncol(OL)){ 
  sg.other<-unique(data.raw[data.raw$Cod.Magazzino.Articolo == coop.other[i],"Segmento"])
  v<-c()
  for(j in 1:ncol(TP)){
    sg.treat<-unique(data.raw[data.raw$Cod.Magazzino.Articolo == treat[j],"Segmento"])
    if(sg.other == sg.treat){v<-cbind(v,TP.price[,j])
    } else {v<-v}
  }
  avg.price[,i]<-apply(v,1,mean)  
}

# N.B To produce reports for Coop use : 
#nomi.treat<-c("PANNA COOP","UOVO COOP","GRANELLA COOP","RISO LATTE COOP", 
#"CACAO NOCC. COOP", "PANNA CACAO COOP","GOCCE CIOC. COOP", 
#"CEREALI BIO", "COOP VV FIBRA", "FIOCCHI ORZO COOP", "PETIT COOP")

list.prices<-list(TP.price, SP.price,OL.price)
stat<-list()

for(i in 1:length(list.cookies)){
  y<-list.cookies[[i]]
  p<-list.prices[[i]]
  
  ### Stats
  stats<-matrix(NA,ncol(y),5)
  colnames(stats)<-c("mean","sd","max","min","median")
  rownames(stats)<-colnames(y)
  
  stats[,1]<-apply(y,2,FUN=mean,na.rm=T)
  stats[,2]<-apply(y,2,FUN=sd,na.rm=T)
  stats[,3]<-apply(y,2,FUN=max,na.rm=T)
  stats[,4]<-apply(y,2,FUN=min,na.rm=T)
  stats[,5]<-apply(y,2,FUN=median,na.rm=T)
  
  stat[[i]]<-stats
  
  ### Plots
  par(mar=c(2,3.6,1.5,0.5))
  if(i==1){par(mfrow=c(6,3))} else {par(mfrow=c(6,4))}
  
  window<-dates >= dates[1]
  # window<-dates > as.Date("2018-01-01" ,format = "%Y-%m-%d") To plot just one piece of the series
  
  for (j in 1:ncol(y)){ 
    
    # Time series of units sold
    #main<-paste("Item",j)    #main<-nomi.treat[i]
    main <- "Unit sold"
    plot(y = y[,j][window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
         type = "l", xlab = "", ylab = "", main = main)
    mtext(paste(j), side = 2, line = 2.3, las = 1)
    abline(v = int.date, col="red")
    
    # Time series of price 
    plot(y = p[,j][window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
         type = "l", xlab = "", ylab = "", main = "Price")
    abline(v = int.date, col="red")
    
    if(i==2){
      p.relative<-p[,j]/list.prices[[1]][,j]
      plot(y = p.relative[window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
         type = "l", xlab = "", ylab = "", main = "Relative Price")
      abline(v = int.date, col="red")
    }
    
    if(i==3){
      p.relative<-p[,j]/avg.price[,j]
      plot(y = p.relative[window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
           type = "l", xlab = "", ylab = "", main = "Relative Price to market segment")
      abline(v = int.date, col="red")
    }
    
    # Acf
    Acf(y[,j], main = main, ylab = "")
    title("Acf",line=0.5)
    
  }
}

# Example plot (item 6)

par(mar = c(3,2,3,2))
par(mfrow=c(1,4))
plot(y = TP[,6][window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
     type = "l", xlab = "", ylab = "", main = "Unit sold")
plot(y = TP.price[,6][window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
     type = "l", xlab = "", ylab = "", main = "Price")
abline(v = int.date, col="red")
plot(x = NULL, y=NULL )
Acf(TP[,6], main = "", ylab = "") ; title("Acf", line = 1)

plot(y = SP[,6][window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
     type = "l", xlab = "", ylab = "", main = "Unit sold")
plot(y = SP.price[,6][window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
     type = "l", xlab = "", ylab = "", main = "Price")
abline(v = int.date, col="red")
p.relative<-SP.price[,6]/TP.price[,6]
plot(y = p.relative[window], x = as.Date(dates[window], format = "%Y-%d-%m"), 
     type = "l", xlab = "", ylab = "", main = "Relative Price")
abline(v = int.date, col="red")
Acf(SP[,6],  main = "", ylab = "") ; title("Acf", line = 1)


#####################################################################################
# Model estimation
#####################################################################################

# C-SARIMA models are fitted independently to each time series, the external regressors
# include the dummy variables for holidays and the price.
# However, since the price of target products is the variable absorbing the intervention,
# we will consider here a modified version of price that after the intervention date
# is held constant to the value registered the day before. 
# The models are fitted to the data before intervention. 

### TP models

# defining y and price  
y<-log(TP)
price<-log(TP.mod.price)

# empty objects to store results
model<-list()

# Models
xreg=cbind(hol=hol, dec.sun = dec.sun, 
           sat = sat, sun = sun, 
           mon = mon, tue = tue, wed = wed, thr = thr)[dates < int.date,]

model[[1]] <- Arima(y = ts(data=y[dates < int.date, 1], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,1], xreg))
model[[2]] <- Arima(y = ts(data=y[dates < int.date, 2], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,2], xreg))
model[[3]] <- Arima(y = ts(data=y[dates < int.date, 3], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,3], xreg))
model[[4]] <- Arima(y = ts(data=y[dates < int.date, 4], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(2,0,0), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,4], xreg))
model[[5]] <- Arima(y = ts(data=y[dates < int.date, 5], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,5], xreg))
model[[6]] <- Arima(y = ts(data=y[dates < int.date, 6], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(0,0,1), xreg = cbind(price = price[dates < int.date,6], xreg))
model[[7]] <- Arima(y = ts(data=y[dates < int.date, 7], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,7], xreg))
model[[8]] <- Arima(y = ts(data=y[dates < int.date, 8], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,2), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,8], xreg))
model[[9]] <- Arima(y = ts(data=y[dates < int.date, 9], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,9], xreg))
model[[10]] <- Arima(y = ts(data=y[dates < int.date, 10], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                           frequency = 7), order = c(3,0,0), seasonal = c(1,0,1), xreg = cbind(price = price[dates < int.date,10], xreg))
model[[11]] <- Arima(y = ts(data=y[dates < int.date, 11], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(1,0,1), seasonal = c(1,0,1), xreg = cbind(price = price[dates < int.date,11], xreg))

### SP models

# defining y and price  
y<-log(SP)
price<-log(SP.price)

# empty objects to store results
model<-list()
 
# Models
xreg=cbind(hol=hol, dec.sun = dec.sun, 
           sat = sat, sun = sun, 
           mon = mon, tue = tue, wed = wed, thr = thr)[dates < int.date,]

# qui prova (2,0,1) 
model[[1]] <- Arima(y = ts(data=y[dates < int.date, 1], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(2,0,1), seasonal = c(0,0,0), xreg = cbind(price = price[dates < int.date,1], xreg))
model[[2]] <- Arima(y = ts(data=y[dates < int.date, 2], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(1,0,0), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,2], xreg))
model[[3]] <- Arima(y = ts(data=y[dates < int.date, 3], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(1,0,0), seasonal = c(1,0,1), xreg = cbind(price = price[dates < int.date,3], xreg))
model[[4]] <- Arima(y = ts(data=y[dates < int.date, 4], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(2,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,4], xreg))
model[[5]] <- Arima(y = ts(data=y[dates < int.date, 5], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(2,0,0), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,5], xreg))
model[[6]] <- Arima(y = ts(data=y[dates < int.date, 6], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(2,0,1), seasonal = c(1,0,1), xreg = cbind(price = price[dates < int.date,6], xreg))
model[[7]] <- Arima(y = ts(data=y[dates < int.date, 7], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(2,0,1), seasonal = c(0,0,0), xreg = cbind(price = price[dates < int.date,7], xreg)) 
model[[8]] <- Arima(y = ts(data=y[dates < int.date, 8], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(1,0,2), seasonal = c(0,0,0), xreg = cbind(price = price[dates < int.date,8], xreg))
model[[9]] <- Arima(y = ts(data=y[dates < int.date, 9], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(1,0,1), seasonal = c(1,0,0), xreg = cbind(price = price[dates < int.date,9], xreg)) 
model[[10]] <- Arima(y = ts(data=y[dates < int.date, 10], start=as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u")), 
                            frequency = 7), order = c(1,0,1), seasonal = c(0,0,0), xreg = cbind(price = price[dates < int.date,10], xreg))


###########################################################################################
### Causal effect computation
###########################################################################################

# We estimate the causal effect of the permanent price rebate on the sales of TP's and SP's
# at three time horizons by looping over the subgroups [prod] and the cookies in each subgroup [i] 

xreg <- cbind(hol=hol, dec.sun = dec.sun, 
              sat = sat, sun = sun, 
              mon = mon, tue = tue, wed = wed, thr = thr)

# Loop 

for(prod in 1:length(list.cookies)){
  
  # defining y and price & reading estimated model 
  y<-log(list.cookies[[prod]])
  price<-log(list.prices[[prod]])
  model<-readRDS(file=paste("modelD0-NA-", names(list.cookies)[prod], ".rds",sep=""))
  
  # empty object to store results    
  csarima_list <- list() 
  
  for(i in 1:ncol(y)){ print(i)
    
    xreg1 <- cbind(price=price[,i], xreg)
    csarima_list[[i]] <- CausalArima(y = ts(y[,i], start = 5, frequency = model[[i]]$arma[5]), 
                                         auto = FALSE, dates = dates, int.date = int.date, 
                                         xreg = xreg1, nboot = 10000, model = model[[i]])
    
  }
  
 saveRDS(csarima_list, file = paste("CausalD0-NA-boot-", names(list.cookies)[prod],".rds", sep=""))
  
}

#####################################################################################
# REG ARIMA
#####################################################################################

# Creating an intervention dummy
ind <- dates>=int.date
intervention <- c(rep(0,times=sum(!ind)),rep(1,times=sum(ind)))

# SARIMA estimation

for(prod in 1:length(list.cookies)){
  
  # defining y and price  
  y<-log(list.cookies[[prod]])
  price<-log(list.prices[[prod]])
  
  # empty object to store results
  beta<-array(NA, c(ncol(y),3, 3))
  colnames(beta) <- c("coef", "se", "tstat")
  n.bic<-matrix(NA,nrow=ncol(y),ncol=3)
  model <- list()
  
for(i in 1:ncol(y)){ print(i)
    for(j in 1:length(horizon)){
      print(horizon[j])
      int<-dates<=horizon[j]
      xreg=cbind(hol=hol[int], intervention=intervention[int], price = price[int,i], sat=sat[int], sun=sun[int], dec.sun = dec.sun[int], mon = mon[int], tue = tue[int], wed = wed[int], thr = thr[int])
      model <- auto.arima(ts(y[int,i], start = 5, frequency = 7), D=0, max.p = 5, max.q = 5, ic="bic", xreg=xreg)
      index<-grep("intervention",attr(model$var.coef, "dimnames")[[1]])
      n.bic[i,j] <- model$bic
      beta[i, 1, j] <- model$coef[index]
      beta[i, 2, j] <- sqrt(model$var.coef[index,index]) # standard error
      beta[i, 3, j] <- model$coef[index]/sqrt(model$var.coef[index,index]) # tstat
    }
  }
  saveRDS(beta, file = paste("betaD0-",names(list.cookies)[prod],".rds", sep=""))
  saveRDS(n.bic, file = paste("bicD0-",names(list.cookies)[prod],".rds", sep=""))
}

###########################################################################################
### Plots & Tables
########################################################################################### 



### Plots
# Residuals
par(mar=c(3,4,3,2))
par(mfrow=c(1,2))

for(i in 1:ncol(SP)){
  prod <- SP.causal[[i]]
  res <- prod[[1]]$model$residuals
  res <- res[!is.na(res)]
  Acf(res, main = "", xlab = "", ylab = "")
  title(paste("Acf"), line = 1)
  mtext(paste(i), side = 2, line = 2.3, las = 1)
  qqnorm(scale(res), main = "", xlab="", ylab = "") ; title("Normal Q-Q Plot", line = 1); abline(0,1)
}


# Plot obs vs forecast
par(mar = c(2,3,2,2))
par(mfrow=c(6,3))
for(i in 1:length(SP.causal)){
  prod <- SP.causal[[i]]
  for(j in 1:length(prod)){
    plot(prod[[j]], int.date = int.date, window = "2018-09-01", type = "forecast", 
         main = paste("Forecasted series ", i, ", horizon ", j))
  }
}

# Plot effect
par(mar = c(2,3,2,2))
par(mfrow=c(6,3))
for(i in 1:length(SP.causal)){
  prod <- SP.causal[[i]]
  for(j in 1:length(prod)){
    plot(prod[[j]], int.date = int.date, type = "effect", 
         main = paste("Pattern of point effect ", i, ", horizon ", j))
  }
}

# Example plot TP , item 4 
par(mar = c(3,2,3,2))
par(mfrow=c(2,3))

prod <- TP.causal[[4]]
for(j in 1:length(prod)){
  plot(prod[[j]], int.date = int.date, window = "2018-09-01", type = "forecast", 
       main = paste("Forecasted series, horizon ",j))
}

for(j in 1:length(prod)){
  plot(prod[[j]], int.date = int.date, type = "effect", main = paste("Pattern of point effect, horizon ",j))
}


# Example plot SP, item 10
prod <- SP.causal[[10]]
for(j in 1:length(prod)){
  plot(prod[[j]], int.date = int.date, window = "2018-09-01", type = "forecast",
       main = paste("Forecasted series, horizon ",j))
}

for(j in 1:length(prod)){
  plot(prod[[j]], int.date = int.date, type = "effect", 
       main = paste("Pattern of point effect, horizon ",j))
}

### Tables 

TP.causal <- readRDS("CausalD0-NA-boot-TP.rds")
SP.causal <- readRDS("CausalD0-NA-boot-SP.rds")
beta.TP <- readRDS("betaD0-TP.rds")
beta.SP <- readRDS("betaD0-SP.rds")

# Estimated models
library(stargazer)
model.1 <- SP.causal[[1]][[1]]$model[1:14]
model.2 <- SP.causal[[2]][[1]]$model[1:14]
model.3 <- SP.causal[[3]][[1]]$model[1:14]
model.4 <- SP.causal[[4]][[1]]$model[1:14]
model.5 <- SP.causal[[5]][[1]]$model[1:14]
model.6 <- SP.causal[[6]][[1]]$model[1:14]
model.7 <- SP.causal[[7]][[1]]$model[1:14]
model.8 <- SP.causal[[8]][[1]]$model[1:14]
model.9 <- SP.causal[[9]][[1]]$model[1:14]
model.10 <- SP.causal[[10]][[1]]$model[1:14]

class(model.1) <- "Arima"
class(model.2) <- "Arima"
class(model.3) <- "Arima"
class(model.4) <- "Arima"
class(model.5) <- "Arima"
class(model.6) <- "Arima"
class(model.7) <- "Arima"
class(model.8) <- "Arima"
class(model.9) <- "Arima"
class(model.10) <- "Arima"

stargazer(model.1, model.2, model.3, model.4, model.5, model.6, model.7,
          model.8, model.9, model.10, align = TRUE, no.space = TRUE, 
          omit.stat = c("ll", "rsq", "ser", "f"), dep.var.labels = sub( x= 1:10, pattern = "*", replacement = "Item "))

stargazer(model1$model[1:14], omit.stat = c("ll", "rsq", "ser", "f"), align = T, no.space = T)

# Causal effect tables
effect.table.tp <- effect_table(TP.causal, type = "norm", stat = "avg", direction = "b", horizon = as.Date(horizon))
effect.table.sp <- effect_table(SP.causal, type = "norm", stat = "avg", direction = "b", horizon = as.Date(horizon))
effect.table.boot.tp <- effect_table(TP.causal, type = "boot", stat = "avg", direction = "b", horizon = as.Date(horizon))
effect.table.boot.sp <- effect_table(SP.causal, type = "boot", stat = "avg", direction = "b", horizon = as.Date(horizon))

# Beta tables
beta.table.tp <- beta_table(beta.TP)
beta.table.sp <- beta_table(beta.SP)


# All together
tp.est <- data.frame(sarima_h1 = effect.table.tp[,1], beta.h1 = beta.table.tp[,1], 
                     sarima_h2 = effect.table.tp[,2], beta.h2 = beta.table.tp[,2],
                     sarima_h3 = effect.table.tp[,3], beta.h3 = beta.table.tp[,3])

sp.est <- data.frame(sarima_h1 = effect.table.sp[,1], beta.h1 = beta.table.sp[,1], 
                     sarima_h2 = effect.table.sp[,2], beta.h2 = beta.table.sp[,2],
                     sarima_h3 = effect.table.sp[,3], beta.h3 = beta.table.sp[,3])

#####################################################################################
# Confronto tra i vari modelli
#####################################################################################

### Modelli a confronto
m1<-readRDS("model-NA-OL.rds")
m1.1<-readRDS("model-NA-2dOL.rds")
m2<-readRDS("model-OL.rds")
m3<-readRDS("modelD0-OL-NA.rds")
m3.1<-readRDS("modelD0-NA-2dOL.rds")
m4<-readRDS("modelD0-OL.rds")

list<-list(m1 = m1, m11 = m1.1, m2 = m2, m3 = m3, m31 = m3.1, m4 = m4)
# BIC & p.value Ljung-Box 

bic<-matrix(NA, 11,length(list))
p.value<-matrix(NA, 11,length(list))
colnames(bic)<-names(list) ; colnames(p.value)<-names(list)
for(i in 1:length(list)){
  m<-list[[i]]
  for(j in 1:length(m)){
    bic[j,i]<-m[[j]]$fit$bic
    df<-sum(m[[j]]$order)
    p.value[j,i]<-Box.test(m[[j]]$fit$residuals, type="Ljung-Box", fitdf=df, lag=(df+1))$p.value
  }
}

# LB test with maxdf = max(np) where np = max(order) computed across the models for each j 
p.value.2<-matrix(NA, length(list[[1]]),length(list))
for(j in 1:length(list[[1]])){
  np<-sum(list$m1[[j]]$order)
  for(i in 2:length(list)){
    np<-append(np,sum(list[[i]][[j]]$order))
  }
  max.df<-max(np) 
  for(i in 1:length(list)){
    m<-list[[i]]
    p.value.2[j,i]<-Box.test(m[[j]]$fit$residuals, type="Ljung-Box", fitdf=max.df, lag=(max.df+1))$p.value
  }
  
}

# LB test with maxdf = max(np) where np = max(order) computed across the all models all j 
p.value.3<-matrix(NA, length(list[[1]]),length(list))
sum.order<-c()
np<-c()
for(i in 1:length(list)){
  m<-list[[i]]
  for(j in 1:length(m)){
    sum.order[j]<-c(sum(m[[j]]$order))
  }
  np<-append(np, sum.order)
}

max.df<-max(np)
for(i in 1:length(list)){
  m<-list[[i]]
  for(j in 1:length(m)){
    p.value.3[j,i]<-Box.test(m[[j]]$fit$residuals, type="Ljung-Box", fitdf=max.df, lag=(max.df+1))$p.value
  }
}

# Ordine
ord<-matrix(NA, 11,length(list))
colnames(ord)<-names(list)
for(i in 1:length(list)){
  m<-list[[i]]
  for(j in 1:length(m)){
    o<-m[[j]]$order
    ord[j,i]<-paste("(",o[1],o[2],o[3],")","(",o[4],o[5],o[6],")", sep="")
  }
}

# Outliers 

# TABELLA CON TUTTE LE OSSERVAZIONI
tp<-readRDS("model-NA-2dTP.rds")
sp<-readRDS("model-NA-2dSP.rds")
ol<-readRDS("model-NA-2dOL.rds")

m.list<-list(tp=tp, sp=sp, ol=ol)

for(i in 1:length(m.list)){
  res<-m.list[[i]][[1]]$fit$residuals
  fitted<-m.list[[i]][[1]]$fit$fitted
  dat<-data.frame(res,fitted)
  colnames(dat)<-c(paste("res.",names(m.list)[i],1,sep=""), paste("fitted.",names(m.list)[i],1,sep=""))
  for(j in 2:length(m.list[[i]])){
    res<-m.list[[i]][[j]]$fit$residuals
    fitted<-m.list[[i]][[j]]$fit$fitted
    dat2<-data.frame(res,fitted)
    colnames(dat2)<-c(paste("res.",names(m.list)[i],j, sep=""), paste("fitted.",names(m.list)[i],j, sep=""))
    dat<-data.frame(dat,dat2)
  }
  write.table(dat, paste("res.",names(m.list)[i],".csv",sep=""))
}

write.table(data.frame(read.csv("res.tp.csv", header=T,sep=" "), 
                       read.csv("res.sp.csv", header=T,sep=" "),
                       read.csv("res.ol.csv", header=T,sep=" ")), "m11_res.txt")
m11.res<-read.table("m11_res.txt")

write.table(data.frame(Date=dates[dates<int.date], Weekday=weekdays(dates[dates<int.date]), m11.res), "m11_res.txt")

# Boxplot
m1<-read.table("m1_res.txt")
m1.1<-read.table("m11_res.txt")
m2<-read.table("m2_res.txt")
m3<-read.table("m3_res.txt")
m3.1<-read.table("m31_res.txt")
m4<-read.table("m4_res.txt")

list<-list(m1 = m1, m11 = m1.1, m2 = m2, m3 = m3, m31 = m3.1, m4 = m4)

for(i in 1:length(list)){
  ind<-c(3,5,7,9,11,13,15,17,19,21,23)
  ind2<-c(25,27,29,31,33,35,37,39,41,43)
  ind3<-c(45,47,49,51,53,55,57,59,61,63,65)
  mat<-list[[i]][,ind]
  mat2<-list[[i]][,ind2]
  mat3<-list[[i]][,ind3]
  boxplot(mat)
  boxplot(mat2)
  boxplot(mat3)
}

store.values<-as.data.frame(matrix(NA,nrow=220,ncol=5))
colnames(store.values)<-c("Item","Date","Weekday","Value","Fitted")
for(j in 1:length(modeld0)){
  l<-list()
  res<-abs(modeld0[[j]]$fit$residuals)
  res.order<-res[order(res,decreasing = T)][1:20]
  store.values[((j-1)*20+1):(j*20),1]<-rep(j,20)
  store.values[((j-1)*20+1):(j*20),2]<-dates[1:398][res %in% res.order]
  store.values[((j-1)*20+1):(j*20),3]<-weekdays(dates[1:398][res %in% res.order])
  store.values[((j-1)*20+1):(j*20),4]<-modeld0[[j]]$fit$x[res %in% res.order]
  store.values[((j-1)*20+1):(j*20),5]<-modeld0[[j]]$fit$fitted[res %in% res.order]
}
store.values[,2]<-as.Date(store.values[,2])

write.table(store.values,"ol-out-modeld0.txt")

dat.tp<-read.table("tp-out-modeld0.txt")[,c("Item","Date","Value")]
dat.sp<-read.table("sp-out-modeld0.txt")[,c("Item","Date","Value")]
dat.ol<-read.table("ol-out-modeld0.txt")[,c("Item","Date","Value")]


dat.tp<-reshape(data = dat.tp, direction = "wide",idvar = "Date", timevar = "Item")
colnames(dat.tp)<-gsub(colnames(dat.tp),pattern="Value",replacement = "res.tp")
dat.sp<-reshape(data = dat.sp, direction = "wide",idvar = "Date", timevar = "Item")
colnames(dat.sp)<-gsub(colnames(dat.sp),pattern="Value",replacement = "res.sp")
dat.ol<-reshape(data = dat.ol, direction = "wide",idvar = "Date", timevar = "Item")
colnames(dat.ol)<-gsub(colnames(dat.ol),pattern="Value",replacement = "res.ol")

merged<-merge(dat.tp, dat.sp, 
              by="Date", sort = T, all.x = T, all.y = T)
merged<-merge(merged, dat.ol, by = "Date", sort=T, all.x=T, all.y = T)

tab<-merged
tab<-as.data.frame(apply(tab[,-1],2,as.numeric))
model.tp<-readRDS("modelD0-TP.rds")
model.sp<-readRDS("modelD0-SP.rds")
model.ol<-readRDS("modelD0-OL.rds")

### Prova
tab2<-tab
ind<-which(is.na(tab2$res.tp.1))
res<-model.tp[[1]]$fit$residuals[ind]
tab2$res.tp.1[ind]<-res

### Ciclo
tab3<-tab 
l<-list(tp=model.tp,sp=model.sp,ol=model.ol)

for(i in 1:length(l)){ print(names(l)[i])
  for(j in 1:length(l[[i]])){ print(j)
    ind<-which(is.na(tab3[,paste("res.",names(l)[i],".",j,sep="")]))
    res<-l[[i]][[j]]$fit$residuals[ind]
    tab3[,paste("res.",names(l)[i],".",j,sep="")][ind]<-res
  }
}

write.table(data.frame(merged$Date,tab3),"Outliers-tab-full.txt")

# t test
tstat.11<-c()
m11<-readRDS("model-NA-2dOL.rds") # cambia
for(i in 1:length(m11)){
  var1<-m11[[i]]$fit$var.coef["hol1","hol1"]
  var2<-m11[[i]]$fit$var.coef["hol2","hol2"]
  covar<-m11[[i]]$fit$var.coef["hol1","hol2"]
  num <- m11[[i]]$fit$coef["hol1"] - m11[[i]]$fit$coef["hol2"]
  den <- sqrt(var1 + var2 -2*covar)
  tstat.11[i]<-num/den
}

tstat.31<-c()
m31<-readRDS("modelD0-NA-2dOL.rds") # cambia
for(i in 1:length(m31)){
  var1<-m31[[i]]$fit$var.coef["hol1","hol1"]
  var2<-m31[[i]]$fit$var.coef["hol2","hol2"]
  covar<-m31[[i]]$fit$var.coef["hol1","hol2"]
  num <- m31[[i]]$fit$coef["hol1"] - m31[[i]]$fit$coef["hol2"]
  den <- sqrt(var1 + var2 -2*covar)
  tstat.31[i]<-num/den
}

tstat.tp <- cbind(tstat.11, tstat.31) # cambia 

tstat.op.sun<-c() # cambia 
m31<-readRDS("modelD0-NA-2dOL.rds") # cambia 
for(i in 1:length(m31)){
  var1<-m31[[i]]$fit$var.coef["sun","sun"]
  var2<-m31[[i]]$fit$var.coef["dec.sun","dec.sun"]
  covar<-m31[[i]]$fit$var.coef["sun","dec.sun"]
  num <- m31[[i]]$fit$coef["sun"] - m31[[i]]$fit$coef["dec.sun"]
  den <- sqrt(var1 + var2 -2*covar)
  tstat.op.sun[i]<-num/den # cambia 
}

tstat.sp.sun[11]<-NA
tstat.31.sun <- cbind(tstat.tp.sun, tstat.sp.sun, tstat.op.sun)
