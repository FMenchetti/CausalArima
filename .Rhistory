pv1.r <- apply(dist1, 1, FUN = function(x)(mean(x < 0)))
### stat2
dist2 <- apply(dist1, 2, cumsum)
stat2 <- rowMeans(dist2)
sd2 <- apply(dist2, 1, sd)
pv2.l <- apply(dist2, 1, FUN = function(x)(mean(x > 0)))
pv2.b <- apply(dist2, 1, FUN = function(x)(2-2*max(mean(x < 0), mean(x > 0))))
pv2.r <- apply(dist2, 1, FUN = function(x)(mean(x < 0)))
### stat3
dist3 <- apply(dist2, 2, FUN = function(x)(x/seq(1, dim(dist2)[1], 1)))
stat3 <- rowMeans(dist3)
sd3 <- apply(dist3, 1, sd)
pv3.l <- apply(dist3, 1, FUN = function(x)(mean(x > 0)))
pv3.b <- apply(dist3, 1, FUN = function(x)(2-2*max(mean(x < 0), mean(x > 0))))
pv3.r <- apply(dist3, 1, FUN = function(x)(mean(x < 0)))
#### Bootstrap based inference
inf <- cbind(
tau = stat1, sd.tau = sd1,
pvalue.tau.l = pv1.l, pvalue.tau.b = pv1.b, pvalue.tau.r = pv1.r,
sum = stat2, sd.sum = sd2,
pvalue.sum.l = pv2.l, pvalue.sum.b = pv2.b, pvalue.sum.r = pv2.r,
avg = stat3, sd.avg = sd3,
pvalue.avg.l = pv3.l, pvalue.avg.b = pv3.b, pvalue.avg.r = pv3.r)
#### Answer
list(type = "boot", inf = inf, boot.distrib = simulated)
}
# Loading data and setting dates
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04","2019-04-30"))
xreg <- sales[, "Price"]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Summary of the estimated effects at different time points (defined in horizon)
summary(ce, horizon = horizon)
rm(list = ls())
library(CausalArima)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04","2019-04-30"))
xreg <- sales[, "Price"]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Summary of the estimated effects at different time points (defined in horizon)
summary(ce, horizon = horizon)
summary(ce, type = "boot", horizon = horizon)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
ce <- CausalArima(y = y.new, auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, type = "boot", horizon = horizon)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
ce <- CausalArima(y = y.new, auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Print
print(ce, type = "norm")
print(ce, type = "boot", horizon = horizon)
## Example 2
# Loading data and setting dates
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04","2019-04-30"))
xreg <- sales[, "Price"]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Print
print(ce, horizon = horizon)
print(ce, type = "boot", horizon = horizon)
## Example 1 (daily data, no predictors)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
ce <- CausalArima(y = y.new, auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
plot(ce, type = "impact", horizon = horizon)
head(ce$y)
## Example 2 (daily data, with predictors)
# Loading data and setting dates
data(sales)
y <- log(sales[, "Sales"])
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04"))
xreg <- sales[, 4:12]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Plot
plot(ce, type = "forecast", horizon = horizon)
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
class(ce$causal.effect)
sum(is.na((ce$causal.effect))
)
na.omit(ce$causal.effect)
prova <- c(1,2,3,NA)
na.omit(prova)
prova <- ts(y = c(1,2,3,NA))
prova <- ts(c(1,2,3,NA))
prova
na.omit(prova)
prova <- ts(c(1,2,3,NA, 5))
na.omit(prova)
prova <- c(1,2,3,NA, 5)
na.omit(prova)
plot(na.omit(prova))
library(CausalArima)
## Example 2 (daily data, with predictors)
# Loading data and setting dates
data(sales)
y <- log(sales[, "Sales"])
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04"))
xreg <- sales[, 4:12]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Plot
plot(ce, type = "forecast", horizon = horizon)
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
head(ce$model$fitted)
class(ce$causal.effect)
class(ce$y)
class(ce$forecast)
prova <- c(ce$model$fitted, ce$forecast)
class(prova)
class(ce$model$fitted)
library(CausalArima)
## Example 1 (daily data, no predictors)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
ce <- CausalArima(y = y.new, auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
## Example 2 (daily data, with predictors)
# Loading data and setting dates
data(sales)
y <- log(sales[, "Sales"])
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04"))
xreg <- sales[, 4:12]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Plot
plot(ce, type = "forecast", horizon = horizon)
plot(ce, type = "impact", horizon = horizon)
## Example 1 (daily data, no predictors)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Plot
plot(y = y.new, x = dates, type = "l", col = "cadetblue", xlim = c(as.Date("2014-10-01"), tail(dates, 1)))
lines(y = y, x = dates, col = "orange")
# Causal effect estimation
ce <- CausalArima(y = y.new, dates = dates, int.date = int.date)
## Example 2 (daily data, with predictors)
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
xreg <- sales[, "Price"]
# Plot
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(1,2))
plot(y = y, x = dates, type = "l", main = "Time series of daily sales")
abline(v = int.date, col = "red"); Acf(y, main = "Acf sales")
par(oldpar)
# Causal effect estimation
# The autocorrelation function indicates a weekly sesonal pattern
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
ce <- CausalArima(y = y.new, auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Print
print(ce, type = "norm")
print(ce, type = "boot", horizon = horizon)
## Example 2
# Loading data and setting dates
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04","2019-04-30"))
xreg <- sales[, "Price"]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Print
print(ce, horizon = horizon)
print(ce, type = "boot", horizon = horizon)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- as.Date(c("2015-04-10", "2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
ce <- CausalArima(y = y.new, auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, type = "boot", horizon = horizon)
## Example 2
# Loading data and setting dates
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04","2019-04-30"))
xreg <- sales[, "Price"]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Summary of the estimated effects at different time points (defined in horizon)
summary(ce, horizon = horizon)
summary(ce, type = "boot", horizon = horizon)
## Example 1 (weekly data, no predictors)
# Generating a time series with weekly seasonality and a vector of dates
y <- simulate(Arima(ts(rnorm(100),freq=4), order=c(1,0,1), seasonal=c(1,0,1)),
nsim=800)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- as.Date(c("2019-12-07", "2020-02-15", "2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
ce <- CausalArima(y = ts(y.new, frequency = 4), dates = dates, int.date = int.date)
# Table of the estimated effects (numeric and latex)
impact(ce)
impact(ce, horizon = horizon)
tab_latex <- impact(ce, format = "latex", horizon = horizon, digits = 3, latex_options = "striped")
tab_latex$impact_norm$average
## Example 2 (daily data, with predictors)
# Loading data and setting dates
data(sales)
y <- sales[, "Sales"]
dates <- as.Date(sales[, "Dates"])
int.date <- as.Date("2018-10-04")
horizon<- as.Date(c("2018-11-04","2019-01-04","2019-04-30"))
xreg <- sales[, 4:12]
# Causal effect estimation
ce <- CausalArima(y = ts(y, frequency = 7), xreg = xreg, int.date = int.date,
dates = dates, nboot = 100)
# Table of the estimated effects (html)
tab_html <- impact(ce, format = "html", horizon = horizon)
tab_html$arima$param
tab_html <- impact(ce, format = "html", horizon = horizon, style = kable_classic,
html_font = "Cambria")
tab_html$arima$param
library(CausalArima)
load("~/GitHub/CausalArima/data/sales.rda")
View(sales)
View(sales)
library(devtools)
source("~/GitHub/CausalArima/R/CausalARIMA.R")
source("~/GitHub/CausalArima/R/plot_arima.R")
source("~/GitHub/CausalArima/R/print_arima.R")
source("~/GitHub/CausalArima/R/table_arima.R")
CausalArima<-function(y, auto = TRUE, order = c(0, 0, 0), seasonal = c(0, 0, 0), ic = "aic", xreg = NULL, dates,
int.date, arima.args = list(), auto.args = list(), nboot = NULL, alpha = 0.05){
### param checks
if(class(y) != "ts" & !is.numeric(y)) stop("y must be numeric or ts")
if(!is.ts(y)){
y <- ts(y, frequency = findfrequency(y))
}
if(!is.null(xreg)) {
if(!is.matrix(xreg) && !is.data.frame(xreg) && !is.numeric(xreg))
stop("`xreg` must be a numeric vector, matrix or data.frame")
xreg <- as.matrix(xreg)
if(nrow(xreg) != length(y)) stop("nrow(xreg) != length(y)")
}
if(!any(class(dates) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`dates` must be a vector of class Date")
if(length(dates) != length(y)) stop("length(dates) != length(y)")
if(length(int.date) != 1 || !any(class(dates) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`int.date` must be a Date of length 1")
if(!missing(nboot) && (!is.numeric(nboot) | nboot <= 0)) stop("`nboot` must be a positive numeric value")
if(auto && sum(sum(order), sum(seasonal)) > 0){auto <- FALSE}
### STEP 1. Subsetting the data: before and after the intervention date
ind<-dates>=int.date
y.00<-ts(y[!ind], frequency = frequency(y))
y.01<-ts(y[ind], frequency = frequency(y))
if(!is.null(xreg)) {
xreg0<-xreg[!ind,]
xreg1<-xreg[ind,]
} else {
xreg0 <- NULL
xreg1 <- NULL
}
### STEP 2. Model estimation in the pre-intervention period
if(auto){
model <- do.call("auto.arima", c(list(y = y.00),
list(ic = ic), list(xreg = xreg0), auto.args))
} else {
model <- do.call("Arima", c(list(y = y.00),
list(order = order), list(seasonal = seasonal), list(xreg = xreg0),
arima.args))
}
### STEP 3. Forecasting the counterfactual outcome in the absence of intervention
h<-length(y.01)
fcast<-forecast(model, xreg = xreg1, h = h, level = 1-alpha)
mean.fcast.0<-as.numeric(fcast$mean)
forecasted_low<-as.numeric(fcast$lower)
forecasted_up<-as.numeric(fcast$upper)
### STEP 4. Causal effect computation: direct comparison between the observed outcome (y.01) and the
#           predicted counterfactual (mean.fcast.0)
causal.effect.0 <- y.01 - mean.fcast.0
### STEP 5. Test statistics
## Extracting
d <- model$arma[6]; D <- model$arma[7]; S <- model$arma[5]
coef <- model$coef
sig2 <- model$sigma2
ar  <- coef[ substr(names(coef), 1, 2) == "ar"  ]
ma  <- coef[ substr(names(coef), 1, 2) == "ma"  ]
sar <- coef[ substr(names(coef), 1, 3) == "sar" ]
sma <- coef[ substr(names(coef), 1, 3) == "sma" ]
## MA(inf)
par <- .sarma2larma(ar = ar, ma = ma, sar = sar, sma = sma, S = S)
psi <- c(1, ARMAtoMA(ar = par$ar, ma = par$ma, lag.max = h-1))
## Stats (tau, sum.tau, avg.tau)
# Removing NA's
psi <- psi[!is.na(causal.effect.0)]
tau  <- causal.effect.0[!is.na(causal.effect.0)]
sum.tau <- cumsum(tau)
avg.tau <- cumsum(tau) / seq(1, length(tau), 1)
# Gaussian based inference
norm <- .norm.inf(stat1 = tau, stat2 = sum.tau, stat3 = avg.tau, sig2 = sig2, psi = psi)
# Bootstrap based inference
boot <- if ( NROW(nboot) > 0 && is.finite(nboot) && nboot >= 1)
{
nboot <- round(nboot[1])
.boot.inf(model = model, h = h, nboot = nboot, y.01 = y.01, xreg = xreg1)
}
else
{
NULL
}
### STEP 6. Saving results
my_list <- list(norm = norm, boot = boot, causal.effect = as.numeric(causal.effect.0), model = model,
dates = dates, int.date = int.date, y = as.numeric(y), xreg = xreg, forecast = mean.fcast.0, forecast_lower=forecasted_low,
forecast_upper = forecasted_up, alpha=alpha)
class(my_list) <- "cArima"
return(my_list)
}
# ------------------------------------------------------------------------------
##################################################################################
## Merge AR(p) and SAR(P); the same for MA(q) and SMA(Q)
##################################################################################
.sarma2larma <- function(ar = NULL, ma = NULL, sar = NULL, sma = NULL, S = 12)
{
#### Adjust
if ( NROW(ar) > 0 ) { ar <- -ar }
if ( NROW(sar) > 0 ) { sar <- -sar }
#### model
list(
ar = -.long(p = ar, ps = sar, s = S),
ma =  .long(p = ma, ps = sma, s = S) )
}
##################################################################################
## Merge short and seasonal components
##################################################################################
.long <- function(p, ps, s)
{
#### Settings
np  <- NROW( p )
nps <- NROW( ps )
####
cp  <- if ( np > 0 ) { c(1, p) } else { 1 }
cps <- if ( nps > 0 )
{
ind <- seq(from = s, by = s, length.out = nps)
x1 <- numeric(s * nps)
x1[ind] <- ps
c(1, x1)
}
else
{
1
}
#### Answer
convolve(cp, rev(cps), type = "open")[-1]
}
##################################################################################
## Compute variance of the point, cumulative and temporal average effect
##################################################################################
.norm.inf <- function(stat1, stat2, stat3, sig2, psi)
{
#### Settings
np <- NROW(psi)
## Stat 1: tau ~ Normal
psi1 <- psi
sd1  <- sqrt(sig2 * cumsum(psi^2))
z1 <- (stat1 - 0) / sd1
## Stat 2: delta ~ Normal
psi2 <- cumsum(psi)
sd2  <- sqrt(sig2 * cumsum(psi2^2))
z2 <- (stat2 - 0) / sd2
## Stat 3: avg.tau ~ Normal
sd3 <- sd2 / seq(1, np, 1)
z3 <- (stat3 - 0) / sd3
#### Gaussian based inference
inf <- cbind(
tau = stat1, sd.tau = sd1,
pvalue.tau.l = pnorm(z1), pvalue.tau.b = 2 * (1 - pnorm(abs(z1))), pvalue.tau.r = 1 - pnorm(z1),
sum = stat2, sd.sum = sd2,
pvalue.sum.l = pnorm(z2), pvalue.sum.b = 2 * (1 - pnorm(abs(z2))), pvalue.sum.r = 1 - pnorm(z2),
avg = stat3, sd.avg = sd3,
pvalue.avg.l = pnorm(z3), pvalue.avg.b = 2 * (1 - pnorm(abs(z3))), pvalue.avg.r = 1 - pnorm(z3))
#### Answer
list(type = "norm", inf = inf)
}
# ------------------------------------------------------------------------------
.boot.inf <- function(model, h, nboot, y.01, xreg){
### Generating bootstrap simulations
simulated <- matrix(NA, h, nboot)
for(i in 1:nboot){
simulated[,i] <- simulate(model,  future = TRUE, nsim = h, xreg = xreg, bootstrap = TRUE)
}
### stat1
# removing rows corresponding to missing obs in y.01
dist1 <- as.numeric(y.01) - simulated
dist1 <- dist1[!is.na(y.01), ]
stat1 <- rowMeans(dist1)
sd1  <- apply(dist1, 1, sd)
pv1.l <- apply(dist1, 1, FUN = function(x)(mean(x > 0)))
pv1.b <- apply(dist1, 1, FUN = function(x)(2-2*max(mean(x < 0), mean(x > 0))))
pv1.r <- apply(dist1, 1, FUN = function(x)(mean(x < 0)))
### stat2
dist2 <- apply(dist1, 2, cumsum)
stat2 <- rowMeans(dist2)
sd2 <- apply(dist2, 1, sd)
pv2.l <- apply(dist2, 1, FUN = function(x)(mean(x > 0)))
pv2.b <- apply(dist2, 1, FUN = function(x)(2-2*max(mean(x < 0), mean(x > 0))))
pv2.r <- apply(dist2, 1, FUN = function(x)(mean(x < 0)))
### stat3
dist3 <- apply(dist2, 2, FUN = function(x)(x/seq(1, dim(dist2)[1], 1)))
stat3 <- rowMeans(dist3)
sd3 <- apply(dist3, 1, sd)
pv3.l <- apply(dist3, 1, FUN = function(x)(mean(x > 0)))
pv3.b <- apply(dist3, 1, FUN = function(x)(2-2*max(mean(x < 0), mean(x > 0))))
pv3.r <- apply(dist3, 1, FUN = function(x)(mean(x < 0)))
#### Bootstrap based inference
inf <- cbind(
tau = stat1, sd.tau = sd1,
pvalue.tau.l = pv1.l, pvalue.tau.b = pv1.b, pvalue.tau.r = pv1.r,
sum = stat2, sd.sum = sd2,
pvalue.sum.l = pv2.l, pvalue.sum.b = pv2.b, pvalue.sum.r = pv2.r,
avg = stat3, sd.avg = sd3,
pvalue.avg.l = pv3.l, pvalue.avg.b = pv3.b, pvalue.avg.r = pv3.r)
#### Answer
list(type = "boot", inf = inf, boot.distrib = simulated)
}
remove.packages("rlang", lib="~/R/win-library/4.1")
