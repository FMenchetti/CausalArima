# as expected, x4 is rarely included in the model
oldpar <- par(no.readonly = TRUE)
par(mar = c(2,2,2,2))
par(mfrow=c(2,3))
plot(causal.1, int.date = int.date, type = c('impact', 'forecast'))
par(mfrow=c(3,4))
plot(causal.1, type = 'ppchecks', int.date = int.date)
par(oldpar)
## Example 2
set.seed(1)
t <- seq(from = 0,to = 4*pi, length.out=300)
y <- cbind(3*sin(2*t)+rnorm(300), 2*cos(2*t) + rnorm(300))
dates <- seq.Date(from = as.Date("2015-01-01"), by = "week", length.out=300)
int.date <- as.Date("2020-02-27")
y[dates >= int.date,] <- y[dates >= int.date,]+2
# Model definition
causal.2 <- CausalMBSTS(y, components = c("trend", "cycle"), cycle.period = 75,
dates = dates, int.date = int.date,
s0.r = 0.01*diag(2), s0.eps = 0.1*diag(2),
niter = 100, burn = 10)
# Plotting
oldpar <- par(no.readonly = TRUE)
par(mfrow=c(2,4))
plot(causal.2, type = 'ppchecks', int.date = int.date)
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
prova <- plot(ce, type = "forecast")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
prova <- plot(ce, type = "forecast")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
prova <- plot(ce, type = "forecast")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
prova <- plot(ce, type = "forecast")
.forecast <- function(cArima, horizon = NULL, win = 0.4, colours=c("darkblue", "black"),
fill_colour="slategray2", lines_size=0.6){
# Settings
dates <- cArima$dates[!is.na(cArima$y)]
int.date <- cArima$int.date
observed <- na.omit(as.numeric(cArima$y))
forecasted <- na.omit(c(cArima$model$fitted, cArima$forecast))
forecasted_up<-forecasted_inf<-rep(NA, length(na.omit(cArima$model$fitted)))
forecasted_up<-append(forecasted_up, cArima$forecast_upper)
forecasted_inf<-append(forecasted_inf, cArima$forecast_lower)
start <- which(dates == int.date) - round(win * sum(dates < int.date))
end <- length(forecasted)
x <- dates[start:end]
# Plot
dat <- data.frame(x = x, forecasted.cut = forecasted[start:end], observed.cut = observed[start:end],
forecasted_up=forecasted_up[start:end], forecasted_inf=forecasted_inf[start:end])
ylim <- c(min(dat[, -1], na.rm = T), max(dat[, -1], na.rm = T))
g <- ggplot(data = dat, aes(x = x, colour = "Legend")) +  coord_cartesian(ylim = ylim) +  theme_bw(base_size = 15)+
labs(title = "Forecasted series", y = "", x = "") +
scale_colour_manual(values =colours ) +
geom_vline(aes(xintercept = int.date, linetype = paste(int.date)), colour = "darkgrey", size = lines_size) +
scale_linetype_manual(values = "dashed") +
labs(color="Time series", linetype="Intervention date") +
guides(colour = guide_legend(order = 1), linetype = guide_legend(order = 2))+
guides(color=guide_legend(override.aes=list(fill=NA)))+
geom_lineribbon(aes(y = forecasted.cut, color = "Forecast", ymin = forecasted_inf, ymax = forecasted_up),
size = lines_size, linetype ="dashed", fill = fill_colour)+
geom_line(aes(y = observed.cut, color = "Observed"), size = lines_size)
if(!is.null(horizon)){
g<-g+ geom_vline(xintercept = horizon, colour = "darkgrey", size = lines_size, linetype = "dashed")
}
g
# return(g)
}
.forecast(ce)
library(tidybayes)
.forecast(ce)
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
.forecast(x, horizon = horizon, ...)
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
.impact(x, horizon = horizon, ...)
# return(res)
}
# Residuals plots
if("residuals" %in% type){
.residuals(x, ...)
}
}
plot.cArima(ce, type = "forecast")
prova <- .forecast(ce)
prova
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
.forecast(x, horizon = horizon, ...)
# return(res)
}
}
plot.cArima(ce, type = "forecast")
prova <- plot.cArima(ce, type = "forecast")
prova
.impact <- function(cArima, horizon = NULL, alpha = 0.05, color_line="darkblue", color_intervals="slategray2", lines_size=0.6){
# Settings
dates <- cArima$dates[!is.na(cArima$causal.effect)]
int.date <- cArima$int.date
x <- dates[dates >= int.date]
y <- na.omit(cArima$causal.effect)
y.upper <- y + cArima$norm$inf[, "sd.tau"]*qnorm(1-alpha/2)
y.lower <- y - cArima$norm$inf[, "sd.tau"]*qnorm(1-alpha/2)
# Plot effect
dat <- data.frame(x = x, y = y, y.upper = y.upper, y.lower = y.lower)
ylim <- c(min(dat[, "y.lower"]), max(dat[, "y.upper"]))
g <- ggplot(data = dat, aes(x = x)) +  coord_cartesian(ylim = ylim) + labs(title = "Point effect", y = "", x = "") +
theme_bw(base_size = 15)+
geom_ribbon(aes(x = x, ymax = y.upper, ymin = y.lower), fill =color_intervals)+
geom_hline(yintercept=0, colour = "darkgrey", size = lines_size, linetype = "solid")+
geom_line(aes(y = y), color = color_line, linetype = "dashed", size = lines_size)
# Cumulative plot
dat_cum<-dat
dat_cum$y<-cumsum(dat$y)
dat_cum$y.upper<-cumsum(dat$y.upper)
dat_cum$y.lower<-cumsum(dat$y.lower)
g_cum <- ggplot(data = dat_cum, aes(x = x))  + labs(title = "Cumulative effect", y = "", x = "") +
theme_bw(base_size = 15)+
geom_ribbon(aes(x = x, ymax = y.upper, ymin = y.lower), fill = color_intervals)+
geom_hline(yintercept=0, colour = "darkgrey", size = lines_size, linetype = "solid")+
geom_line(aes(y = y), color =color_line, linetype = "dashed", size = lines_size)
if(!is.null(horizon)){
g <-g + geom_vline(xintercept = horizon, linetype="dashed", size = lines_size)
g_cum<-g_cum+ geom_vline(xintercept = horizon, linetype="dashed", size = lines_size)
}
results<-list(plot=g, cumulative_plot=g_cum)
results
#return(results)
}
.impact(ce)
prova <- .impact(ce)
prova
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
.forecast(x, horizon = horizon, ...)
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
.impact(x, horizon = horizon, ...)
# return(res)
}
}
prova <- plot.cArima(ce, type = "impact")
prova
prova <- plot.cArima(ce, type = "forecast")
prova
plot.cArima(ce, type = "impact")
plot.cArima(ce, type = "forecast")
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
.impact(x, horizon = horizon, ...)
# return(res)
}
}
plot.cArima(ce, type = "forecast")
prova <- plot.cArima(ce, type = "forecast")
prova
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
invisible(.impact(x, horizon = horizon, ...))
# return(res)
}
}
prova <- plot.cArima(ce, type = "impact")
prova
prova <- plot.cArima(ce, type = "forecast")
prova
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
invisible(.impact(x, horizon = horizon, ...))
# return(res)
} return(invisible())
}
plot.cArima <- function(x, type = c("forecast", "impact", "residuals"), horizon = NULL, ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!all(type %in% c("forecast", "impact", "residuals")))
stop("allowed 'type' values are 'forecast', 'impact' and 'residuals'")
if(any(horizon <= x$int.date)) stop("Dates in `horizon` must follow `int.date`")
# Plot "Observed vs Forecast"
if("forecast" %in% type){
invisible(.forecast(x, horizon = horizon, ...))
# return(res)
}
# Plot "Causal effect"
if("impact" %in% type){
invisible(.impact(x, horizon = horizon, ...))
# return(res)
} return(invisible())
}
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = c("forecast", "impact"))
prova <- plot(ce, type = c("forecast", "impact"))
prova
prova <- plot(ce, type = c("forecast", "impact"), horizon = horizon)
prova
.plot1 <- function(x){
plot(x, type = "l")
}
.plot2 <- function(x){
plot(2*x, type = "l", col = "blue")
}
plot_method <- function(x, type){
if(type %in% "p1"){
.plot1(x)
}
if(type %in% "p2"){
.plot2(x)
}
}
# esempio
plot_method(rnorm(100), type = "p1")
prova <- plot_method(rnorm(100), type = "p1")
prova <- plot_method(rnorm(100), type = "p2")
plot_method(rnorm(100), type = "p2")
prova <- plot_method(rnorm(100), type = "p2")
plot_method(rnorm(100), type = c("p1","p2"))
plot_method <- function(x, type){
if("p1" %in% type){
.plot1(x)
}
if("p2" %in% type){
.plot2(x)
}
}
# esempio
plot_method(rnorm(100), type = "p1")
plot_method(rnorm(100), type = c("p1","p2"))
plot_method(rnorm(100), type = c("p1","p2"))
prova <- plot_method(rnorm(100), type = c("p1","p2"))
prova
plot_method <- function(x, type){
if("p1" %in% type){
.plot1(x)
}
if("p2" %in% type){
.plot2(x)
}
return(invisible())
}
# esempio
prova <- plot_method(rnorm(100), type = c("p1","p2"))
prova
prova <- plot_method(rnorm(100), type = c("p1"))
prova
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
#return(invisible(res1, res2))
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
prova
.plot1 <- function(x){
invisible(plot(x, type = "l"))
}
.plot2 <- function(x){
invisible(plot(2*x, type = "l", col = "blue"))
}
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
return(res1, res2)
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
#return(res1, res2)
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
prova <- plot_method(rnorm(100), type = "p1")
prova
prova <- plot_method(rnorm(100), type = "p2")
prova
plot_method <- function(x, type){
if("p1" %in% type){
res1 <- .plot1(x)
}
if("p2" %in% type){
res2 <- .plot2(x)
}
return(list(res1, res2))
}
# esempio
prova <- plot_method(rnorm(100), type = "p1")
prova
.plot1(rnorm(100))
prova <- .plot1(rnorm(100))
prova
.plot1 <- function(x){
return(invisible(plot(x, type = "l")))
}
prova <- .plot1(rnorm(100))
prova
.plot1 <- function(x){
plot(x, type = "l")
}
prova <- .plot1(rnorm(100))
prova
library(CausalArima)
<- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
prova <- plot(ce, type = "forecast")
prova
prova <- hist(rnorm(100))
prova
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact")
prova <- plot(ce, type = "impact")
prova
plot(ce, type = "impact")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "forecast")
plot(ce, type = "impact")
prova <- plot(ce, type = "impact")
prova
prova <- plot(ce, type = "forecast")
prova
library(CausalArima)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
# Plot
plot(ce, type = "forecast")
plot(ce, type = "impact", horizon = horizon)
plot(ce, type = "residuals")
dev.off()
plot(ce, type = "forecast")
plot(rnorm(100))
plot(ce, type = "forecast")
plot(ce, type = "residuals")
plot(ce, type = "impact")
plot(ce)
library(CausalArima)
