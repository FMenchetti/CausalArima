}
tab
}
ResultTable(ce, type = "norm", horizon = horizon)
tab <- ResultTable(ce, type = "norm", horizon = horizon)
class(tab)
summary(ce, type = "norm")
summary(ce, type = "norm", horizon = horizon)
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, type = "norm", horizon = horizon)
library(CausalArima)
library(CausalArima)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
summary(ce, horizon = horizon)
results
results
results
x[[type]]$inf[ind, ]
dim(results)
dim(x[[type]]$inf[ind, ])
summary(ce, horizon = horizon)
summary(ce, horizon = horizon)
results
library(CausalArima)
summary(ce, horizon = horizon)
print(ce, horizon = horizon)
library(CausalArima)
print(ce, horizon = horizon)
summary(ce, horizon = horizon)
sumryy
sumry
x <- ce
type <- "norm"
digits <- 3
# summary
sumryy <- print(x, type = type, horizon = horizon)
# summary
sumryy <- print(x, type = type)
class(sumryy)
# summary
sumryy <- as.matrix(print(x, type = type))
sumryy
sumryy <- print(x, type = type)
sumryy
sumryy <- as.data.frame(sumryy)
sumryy
sumryy <- print(x, type = type, horizon = horizon)
sumry <- as.matrix(round(sumryy, digits = digits))
horizon
class(horizon)
# debug here (i boot non hanno standard error perciò è da uno a 4 i norm da 1 a 5)
sumry <- round(t(sumryy[,-1]), digits = digits)
sumry
sumry["tau":"pvalue.tau.r",]
sumry[1:4]
sumry[1:4,]
sumry["tau":"pvalue.tau.b",]
sumry[c("tau","pvalue.tau.b"),]
ind <- which(rownames(sumry) == "tau"):which(rownames(sumry) == "pvalue.tau.r")
ind
sumry[ind,]
sumryy <- print(x, type = type, horizon = horizon)
sumryy
as.data.frame(sumryy)
matrix(sumryy, nrow = length(horizon), ncol = ncol(sumryy))
matrix(NA, 2, 16)
sumryy <- print(x, type = type)
sumryy
matrix(sumryy, 1, 16)
matrix(sumryy, 1, 15)
data.frame(sumryy, 1, 15)
sumry
sumryy <- print(x, type = type)
sumry
sumryy <- print(x, type = type, horizon = horizon)
sumryy <- print(x, type = type)
sumryy
colnames(sumryy)
names(sumryy)
sumryy <- print(x, type = type, horizon = horizon)
names(sumryy)
ind1 <- which(names(sumryy) == "tau"):which(names(sumryy) == "pvalue.tau.r")
ind2 <- which(names(sumryy) == "sum"):which(names(sumryy) == "pvalue.sum.r")
ind3 <- which(names(sumryy) == "avg"):which(names(sumryy) == "pvalue.avg.r")
sumryy
ind1
ind2
ind3
ind1-1
# debug here (i boot non hanno standard error perciò è da uno a 4 i norm da 1 a 5)
sumry <- round(t(sumryy[,-1]), digits = digits)
sumry
obj <- rbind(sumry[ind1-1,], "", sumry[ind2-1,], "", sumry[ind3-1,])
colnames(obj) <- paste(sumryy[,1])
obj
sumryy[,1]
sumryy <- print(x, type = type)
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[ind1,]), "", as.matrix(sumry[ind2,]), "", as.matrix(sumry[ind3,]))
sumryy
sumry
obj <- rbind(as.matrix(sumry[ind1-1,]), "", as.matrix(sumry[ind2-1,]), "", as.matrix(sumry[ind3-1,]))
obj
type <- "boot"
sumryy <- print(x, type = type)
ind1 <- which(names(sumryy) == "tau"):which(names(sumryy) == "pvalue.tau.r")
ind2 <- which(names(sumryy) == "sum"):which(names(sumryy) == "pvalue.sum.r")
ind3 <- which(names(sumryy) == "avg"):which(names(sumryy) == "pvalue.avg.r")
ind1
ind2
ind3
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[ind1-1,]), "", as.matrix(sumry[ind2-1,]), "", as.matrix(sumry[ind3-1,]))
obj
sumryy <- print(x, type = type, horizon = horizon)
# debug here (i boot non hanno standard error perciò è da uno a 4 i norm da 1 a 5)
sumry <- round(t(sumryy[,-1]), digits = digits)
obj <- rbind(sumry[ind1-1,], "", sumry[ind2-1,], "", sumry[ind3-1,])
colnames(obj) <- paste(sumryy[,1])
rownames(obj) <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
nnames <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
grep(nnames, pattern = "Standard error")
nnames[- grep(nnames, pattern = "Standard error")]
library(CausalArima)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
library(CausalArima)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
print.cArima
library(CausalArima)
## Example 1
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
dates = dates, int.date = int.date, nboot = 1000)
# Summary
summary(ce, type = "norm")
detach("package:CausalArima", unload = TRUE)
library(CausalArima)
print(ce)
print(ce, horizon = horizon)
summary(ce)
summary(ce, horizon = horizon)
print(ce, horizon = horizon, type = "boot")
print(ce, type = "boot")
library(CausalArima)
summary(ce, horizon = horizon)
summary(ce, horizon = horizon, type = "boot")
summary(ce)
obj
summary(ce)
ob
obj
dim(obj)
class(obj)
rownames(obj)
length(rownames(obj))
length(names)
length(nnames)
ind1
sumry
ind2
ind3
obj <- rbind(as.matrix(sumry[ind1,]), "", as.matrix(sumry[ind2,]), "", as.matrix(sumry[ind3,]))
object.size()
obj
summary(ce)
summary(ce)
obj
sumry <- as.matrix(round(sumryy, digits = digits))
sumry
library(CausalArima)
summary(ce)
summary(ce, type = "boot")
summary(ce, type = "boot", horizon = horizon)
summary(ce, horizon = horizon)
library(CausalArima)
summary(ce, horizon = horizon)
print(ce, horizon = horizon)
summary(ce, type = "boot", horizon = horizon)
## Example 1 (daily data, no predictors)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Plot
oldpar <- par(no.readonly = TRUE)
plot(y = y.new, x = dates, type = "l", col = "cadetblue", xlim = c(as.Date("2014-10-01"), tail(dates, 1)))
lines(y = y, x = dates, col = "orange")
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date, boot = 10000)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, int.date = int.date, nboot = 10000)
summary(ce)
CoefficientsTable(ce, bootstraping = TRUE, n = 10000)
CoefficientsTable(ce, bootstraping = F, n = 10000)
## Example 2 (weekly data, with predictors)
# Generating a time series of length 800 and a vector of dates
y <- rnorm(800, sd = 1)
dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
# Generating predictors
x1 <- rnorm(800, mean = 2, sd = 0.5)
x2 <- rnorm(800, mean = 3, sd = 0.5)
y <- y -2*x1 + x2
# Adding a fictional intervention
int.date <- as.Date("2019-05-11")
horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date, nboot = 10000)
summary(ce)
CoefficientsTable(ce, n = 10000, bootstraping = TRUE, cov = data.frame(x1,x2))
summary(ce, type = "boot")
CausalArima<-function(y, auto = TRUE, order = c(0, 0, 0), seasonal = c(0, 0, 0), ic = "aic", xreg = NULL, dates,
int.date, arima.args = list(), auto.args = list(), nboot = NULL, alpha = 0.05){
browser()
### param checks
if(class(y) != "ts") stop("y must be an object of class ts")
if(!missing(xreg)) {
if(!is.matrix(xreg) && !is.data.frame(xreg) && !is.numeric(xreg))
stop("`xreg` must be a numeric vector, matrix or data.frame")
xreg <- as.matrix(xreg)
if(nrow(xreg) != length(y)) stop("nrow(xreg) != length(y)")
}
if(!any(class(dates) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`dates` must be a vector of class Date")
if(length(dates) != length(y)) stop("length(dates) != length(y)")
if(length(int.date) != 1 || !any(class(dates) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`int.date` must be a Date of length 1")
if(!missing(nboot) && (!is.numeric(nboot) | nboot <= 0)) stop("`nboot` must be a positive numeric value")
if(auto && sum(sum(order), sum(seasonal)) > 0){auto <- FALSE}
### STEP 1. Subsetting the data: before and after the intervention date
ind<-dates>=int.date
y.00<-y[!ind]
y.01<-y[ind]
if(!is.null(xreg)) {
xreg0<-xreg[!ind,]
xreg1<-xreg[ind,]
} else {
xreg0 <- NULL
xreg1 <- NULL
}
### STEP 2. Model estimation in the pre-intervention period
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
if(auto){
model <- do.call("auto.arima", c(list(y = ts(y.00, start = start, frequency = frequency(y))),
list(ic = ic), list(xreg = xreg0), auto.args))
} else {
model <- do.call("Arima", c(list(y = ts(y.00, start = start, frequency = frequency(y))),
list(order = order), list(seasonal = seasonal), list(xreg = xreg0),
arima.args))
}
### STEP 3. Forecasting the counterfactual outcome in the absence of intervention
h<-length(y.01)
fcast<-forecast(model, xreg = xreg1, h = h, level = 1-alpha)
mean.fcast.0<-as.numeric(fcast$mean)
forecasted_low<-as.numeric(fcast$lower)
forecasted_up<-as.numeric(fcast$upper)
# Check
if(sum(y<0, na.rm = T)==0 & sum(mean.fcast.0<0, na.rm = T)>0){print("warning: negative forecasts for a positive variable")
print(mean.fcast.0[mean.fcast.0<0])}
if(sum(y<0, na.rm = T)==0 & sum(model$fitted<0, na.rm = T)>0){"warning: negative fitted for a positive variable"}
### STEP 4. Causal effect computation: direct comparison between the observed outcome (y.01) and the
#           predicted counterfactual (mean.fcast.0)
causal.effect.0 <- y.01 - mean.fcast.0
### STEP 5. Test statistics
## Extracting
d <- model$arma[6]; D <- model$arma[7]; S <- model$arma[5]
coef <- model$coef
sig2 <- model$sigma2
ar  <- coef[ substr(names(coef), 1, 2) == "ar"  ]
ma  <- coef[ substr(names(coef), 1, 2) == "ma"  ]
sar <- coef[ substr(names(coef), 1, 3) == "sar" ]
sma <- coef[ substr(names(coef), 1, 3) == "sma" ]
## MA(inf)
par <- .sarma2larma(ar = ar, ma = ma, sar = sar, sma = sma, S = S)
psi <- c(1, ARMAtoMA(ar = par$ar, ma = par$ma, lag.max = h-1))
## Stats (tau, sum.tau, avg.tau)
# Removing NA's
psi <- psi[!is.na(causal.effect.0)]
tau  <- causal.effect.0[!is.na(causal.effect.0)]
sum.tau <- cumsum(tau)
avg.tau <- cumsum(tau) / seq(1, length(tau), 1)
# Gaussian based inference
norm <- .norm.inf(stat1 = tau, stat2 = sum.tau, stat3 = avg.tau, sig2 = sig2, psi = psi)
# Bootstrap based inference
boot <- if ( NROW(nboot) > 0 && is.finite(nboot) && nboot >= 1)
{
nboot <- round(nboot[1])
.boot.inf(stat1 = tau, stat2 = sum.tau, stat3 = avg.tau, psi = psi, res = residuals(model),
nrep = nboot)
}
else
{
NULL
}
### STEP 6. Saving results
my_list <- list(norm = norm, boot = boot, causal.effect = causal.effect.0, model = model,
dates = dates, int.date = int.date, y = y, xreg = xreg, forecast = mean.fcast.0, forecast_lower=forecasted_low,
forecast_upper = forecasted_up)
class(my_list) <- "cArima"
return(my_list)
}
# ------------------------------------------------------------------------------
##################################################################################
## Merge AR(p) and SAR(P); the same for MA(q) and SMA(Q)
##################################################################################
.sarma2larma <- function(ar = NULL, ma = NULL, sar = NULL, sma = NULL, S = 12)
{
#### Adjust
if ( NROW(ar) > 0 ) { ar <- -ar }
if ( NROW(sar) > 0 ) { sar <- -sar }
#### model
list(
ar = -.long(p = ar, ps = sar, s = S),
ma =  .long(p = ma, ps = sma, s = S) )
}
##################################################################################
## Merge short and seasonal components
##################################################################################
.long <- function(p, ps, s)
{
#### Settings
np  <- NROW( p )
nps <- NROW( ps )
####
cp  <- if ( np > 0 ) { c(1, p) } else { 1 }
cps <- if ( nps > 0 )
{
ind <- seq(from = s, by = s, length.out = nps)
x1 <- numeric(s * nps)
x1[ind] <- ps
c(1, x1)
}
else
{
1
}
#### Answer
convolve(cp, rev(cps), type = "open")[-1]
}
##################################################################################
## Compute variance of the point, cumulative and temporal average effect
##################################################################################
.norm.inf <- function(stat1, stat2, stat3, sig2, psi)
{
#### Settings
np <- NROW(psi)
## Stat 1: tau ~ Normal
psi1 <- psi
sd1  <- sqrt(sig2 * cumsum(psi^2))
z1 <- (stat1 - 0) / sd1
## Stat 2: delta ~ Normal
psi2 <- cumsum(psi)
sd2  <- sqrt(sig2 * cumsum(psi2^2))
z2 <- (stat2 - 0) / sd2
## Stat 3: avg.tau ~ Normal
sd3 <- sd2 / seq(1, np, 1)
z3 <- (stat3 - 0) / sd3
#### Gaussian based inference
inf <- cbind(
tau = stat1, sd.tau = sd1,
pvalue.tau.l = pnorm(z1), pvalue.tau.b = 2 * (1 - pnorm(abs(z1))), pvalue.tau.r = 1 - pnorm(z1),
sum = stat2, sd.sum = sd2,
pvalue.sum.l = pnorm(z2), pvalue.sum.b = 2 * (1 - pnorm(abs(z2))), pvalue.sum.r = 1 - pnorm(z2),
avg = stat3, sd.avg = sd3,
pvalue.avg.l = pnorm(z3), pvalue.avg.b = 2 * (1 - pnorm(abs(z3))), pvalue.avg.r = 1 - pnorm(z3))
#### Answer
list(type = "norm", inf = inf)
}
# ------------------------------------------------------------------------------
.boot.inf <- function(stat1, stat2, stat3, psi, res, nrep)
{
#### Settings
np <- NROW(psi)
psi1 <- psi
psi2 <- cumsum(psi)
fun <- function(eps, psi)
{
convolve(eps, psi, conj = FALSE, type = "open")[NROW(eps):(2*NROW(eps)-1)]
}
#### Remove NA from res
res <- na.omit(as.numeric(res))
#### Bootstrap residuals
bootm <- as.data.frame(
matrix( sample(x = res, size = np * nrep, replace = TRUE), np, nrep ) )
#### stat1 (arrange by row, replications by col)
boot1 <- mapply(FUN = fun, eps = bootm, MoreArgs = list(psi = psi1))
#### stat2 (arrange by row, replications by col)
boot2 <- mapply(FUN = fun, eps = bootm, MoreArgs = list(psi = psi2))
#### stat3
boot3 <- boot2 / seq(1, np, 1)
#### p-values
pv1.l <- pv1.b <- pv1.r <- pv2.l <- pv2.b <- pv2.r <- pv3.l <- pv3.b <- pv3.r <- rep.int(NA, np)
for (i in 1 : np)
{
stat <- stat1[i]
boot <- boot1[i, ]
pv1.l[i] <- mean(boot < stat)
pv1.b[i] <- mean( boot < -abs(stat) | boot > abs(stat) )
pv1.r[i] <- mean(stat < boot)
stat <- stat2[i]
boot <- boot2[i, ]
pv2.l[i] <- mean(boot < stat)
pv2.b[i] <- mean( boot < -abs(stat) | boot > abs(stat) )
pv2.r[i] <- mean(stat < boot)
stat <- stat3[i]
boot <- boot3[i, ]
pv3.l[i] <- mean(boot < stat)
pv3.b[i] <- mean( boot < -abs(stat) | boot > abs(stat) )
pv3.r[i] <- mean(stat < boot)
}
#### Inference
inf <- cbind(
tau = stat1,
pvalue.tau.l = pv1.l, pvalue.tau.b = pv1.b, pvalue.tau.r = pv1.r,
sum = stat2,
pvalue.sum.l = pv2.l, pvalue.sum.b = pv2.b, pvalue.sum.r = pv2.r,
avg = stat3,
pvalue.avg.l = pv3.l, pvalue.avg.b = pv3.b, pvalue.avg.r = pv3.r)
#### Answer
list(type = "bootstrap", nrep = nrep, inf = inf)
}
library(forecast)
# Generating a time series of length 1000 and a vector of dates
y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
# Adding a fictional intervention
int.date <- as.Date("2015-04-01")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
# Plot
oldpar <- par(no.readonly = TRUE)
plot(y = y.new, x = dates, type = "l", col = "cadetblue", xlim = c(as.Date("2014-10-01"), tail(dates, 1)))
lines(y = y, x = dates, col = "orange")
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), order = c(1,0,0), seasonal = c(1,0,0), dates = dates, int.date = int.date)
auto
sum(sum(order), sum(seasonal)) > 0
auto && sum(sum(order), sum(seasonal)) > 0
ce$model
summary(ce$model)
ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), order = c(1,0,0), seasonal = c(1,0,0), dates = dates, int.date = int.date)
model
ce <- CausalArima(y = ts(y.new, start = start, frequency = 7), order = c(1,0,0), seasonal = c(1,0,1), dates = dates, int.date = int.date)
model
