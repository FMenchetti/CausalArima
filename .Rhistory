if(format=="html"){
# results<-knitr::kable(results, format = "html")
results<-lapply(results, knitr::kable, format = "html")
}
if(format=="latex"){
results<-lapply(results, knitr::kable, format = "latex")
}
return(results)
}
# -----------------------------------------------------------------------------------------
.star <- function(pvalue){
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
2+2
ResultTable(ce)
ResultTable(ce, printing = T)
class(ResultTable(ce))
dim(ResultTable(ce))
summary(ce)
CoefficientsTable(ce)
######################################################################################
######################################################################################
####  Authors:           Fiammetta Menchetti                                      ####
####                     Fabrizio Cipollini                                       ####
####                                                                              ####
####  Date last update: 2021-09-28                                                ####
####                                                                              ####
####  Content:          Table method for object of class cArima                   ####
####                                                                              ####
####  Main function :   ResultTable, CoefficientsTable                                                    ####
####  Dependencies:     .star                                                     ####
####                                                                              ####
####                                                                              ####
######################################################################################
######################################################################################
# INCLUDERE FUNZIONE PER TABULARE TANTI MODELLI INSIEME?
# TABULARE ANCHE LE ALTRE STATISTICHE TUTTE INSIEME?
# LET THE USERS CHANGE PVALUES IN STAR?
#' Function to create ready-to-use tables of the estimated causal effects from a call to CausalArima
#'
#' @param x Object of class \code{cArima}.
#' @param type Character, indicating whether to produce a table reporting
#'             the estimated standard errors under the Normality assumption
#'             (\code{type = "norm"}) or bootstrapped errors (\code{type = "boot"}).
#' @param stat Character, indicating the test statistic to include in the table.
#'             Possible values in \code{c("tau", "sum", "avg")}.
#' @param direction Character, for the two-sided test set \code{direction = "b"} (default),
#'                  for one-sided tests set \code{direction = "l"} or \code{direction = "r"}.
#' @param horizon Optional vector with elements of class \code{Date}. If provided, the function
#'                outputs a table for the required \code{stat} at every given time horizon.
#'                If \code{NULL}, the table refers to the last date of the analysis period.
#' @param digits  Number of decimal places, defaults to 2.
#'
#' @return NULL
#' @export
#'
#' @examples
#' ## Example 2 (weekly data, with predictors)
#' # Generating a time series of length 800 and a vector of dates
#' y <- rnorm(800, sd = 1)
#' dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
#'
#' # Generating predictors
#' x1 <- rnorm(800, mean = 2, sd = 0.5)
#' x2 <- rnorm(800, mean = 3, sd = 0.5)
#' y <- y -2*x1 + x2
#'
#' # Adding a fictional intervention
#' int.date <- as.Date("2019-05-11")
#' horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
#' y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
#'
#' # Causal effect estimation
#' start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
#' ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
#'
#' # Table of the estimated temporal average effects
#' ResultTable(ce, type = "norm", horizon = horizon)
ResultTable <- function(x, type = "norm", stat = c("tau", "avg", "sum"), direction = "b", horizon = NULL, digits = 2, printing=FALSE){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
if(!(type %in% c("norm", "boot"))) stop("allowed 'type' values are 'norm' or 'boot'")
if(length(x$boot) ==0 & type == "boot") stop("no bootstrap estimates to table, please check CausalArima 'nboot' parameter")
if(!all(stat %in% c("tau", "sum", "avg"))) stop("allowed 'stat' values are 'tau', 'sum', 'avg'")
if(!direction %in% c("l", "b", "r")) stop("allowed 'direction' values are 'l', 'b', 'r'")
# Settings
if(is.null(horizon)){ horizon <- tail(x$dates, 1)}
sumry <- as.matrix(summary(x, type = type, horizon = horizon)[, paste("pvalue.", stat, ".", direction, sep = "")])
star. <- apply(sumry, 2, FUN = ".star")
# Table
effects <- round(summary(x, type = type, horizon = horizon)[, paste(stat)], digits = digits)
tab <- matrix(paste0(unlist(effects), c(unlist(star.))), nrow = length(stat), ncol = length(horizon), byrow = T)
rownames(tab) <- stat
colnames(tab) <- paste(horizon)
if(type == "norm"){
sd <- as.matrix(round(summary(x, type = type, horizon = horizon)[, paste("sd.", stat, sep = "")], digits = digits))
sd <- t(apply(sd, 2, FUN = function(x)(paste0("(", x, ")"))))
tab_norm <- matrix(NA, nrow = 2*length(stat), ncol = length(horizon))
even <- as.logical(seq_len(nrow(tab_norm))%%2)
tab_norm[even, ] <- tab
tab_norm[!even, ] <- sd
tab <- tab_norm
colnames(tab) <- paste(horizon)
names <- c(stat, paste0(stat, ".sd"))
rownames(tab) <- names[order(names, decreasing = F)]
}
if(printing){
cat(tab, sep="\n")
}
return(tab)
}
# -----------------------------------------------------------------------------------------
#' Function to create a table of the estimated model coefficients from a call to CausalArima
#'
#' @importFrom stargazer stargazer
#' @param x Object of class \code{cArima}.
#' @param ... Optional arguments to pass on \code{stargazer()}.
#'
#' @return NULL
#' @export
#'
#' @examples
#' ## Example 2 (weekly data, with predictors)
#' # Generating a time series of length 800 and a vector of dates
#' y <- rnorm(800, sd = 1)
#' dates <- seq.Date(from = as.Date("2005-01-01"), by = "week", length.out = 800)
#'
#' # Generating predictors
#' x1 <- rnorm(800, mean = 2, sd = 0.5)
#' x2 <- rnorm(800, mean = 3, sd = 0.5)
#' y <- y -2*x1 + x2
#'
#' # Adding a fictional intervention
#' int.date <- as.Date("2019-05-11")
#' horizon <- c(as.Date("2019-12-07"), as.Date("2020-02-15"), as.Date("2020-04-25"))
#' y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.40
#'
#' # Causal effect estimation
#' start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
#' ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic", dates = dates, xreg = data.frame(x1,x2), int.date = int.date)
#'
#' # Table of the estimated temporal average effects
#' CoefficientsTable(ce)
#'
CoefficientsTable <- function(x, printing=FALSE, format="text", ...){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
arima_order<-t(data.frame(arima_order=arimaorder(x$model)))
coef<-x$model$coef
se<-sqrt(x$model$var.coef)
param<-data.frame(coef, se)
rownames(param)<- names(x$model$coef)
colnames(param)<-c("coef", "se")
loglik<- x$model$loglik
aic<- x$model$aic
aicc<- x$model$aicc
bic<- x$model$bic
log_stats<-t(data.frame(metrics=c(loglik=loglik,aic=aic, bic=bic, aicc=aicc)))
accuracies<-accuracy(x$model)
results<-list( arima_order=arima_order, param=param, accuracy=accuracies, log_stats=log_stats)
if(printing){
cat("Arima Order:\n")
print(arima_order)
print(param)
cat("\n")
print(accuracies)
cat("\n")
print(log_stats)
}
if(format=="html"){
# results<-knitr::kable(results, format = "html")
results<-lapply(results, knitr::kable, format = "html")
}
if(format=="latex"){
results<-lapply(results, knitr::kable, format = "latex")
}
return(results)
}
# -----------------------------------------------------------------------------------------
.star <- function(pvalue){
star <- rep(NA, times = length(pvalue))
ind  <- abs(pvalue) < 0.001
ind2 <- abs(pvalue) < 0.01 & abs(pvalue) >= 0.001
ind3 <- abs(pvalue) < 0.05 & abs(pvalue) >= 0.01
ind4 <- abs(pvalue) < 0.1 &  abs(pvalue) >= 0.05
star[ind] <- "***" ; star[ind2] <- "**" ; star[ind3]<- "*"
star[ind4] <- "." ; star[!ind & !ind2 & !ind3 & !ind4] <- " "
star
}
CoefficientsTable(ce)
ResultTable(ce)
summary(te)
summary(ce)
?CoefficientsTable
ResultTable(ce)
11/117
11/107
2:3*.18
.38*5
(.38*5)- 2:3*.18
(.38*5)/(2:3*.18)
(650*2)*1.38*5
((650*2)*1.38*5)/5
ce
CoefficientsTable(ce)
CoefficientsTable(ce, printing = T)
CoefficientsTable(ce, printing = T)->cane
CoefficientsTable(ce, printing = F)->cane
CoefficientsTable(ce, printing = F, format = "html")
CoefficientsTable(ce, printing = F, format = "latex")
summary(ce)
print(ce)
ResultTable(ce)
CoefficientsTable(ce)
print(ce)
class(print(ce))
CoefficientsTable(ce)->cane
cane$arima_order["p"]
cane$arima_order[,"p"]
table(ce)
?CausalArima
class(print(ce))
#'
#' # Causal effect estimation
#' start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
#' ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
#'                   dates = dates, int.date = int.date, nboot = 1000)
#'
#' # Summary
#' summary(ce, type = "norm")
#' summary(ce, type = "boot", horizon = horizon)
#'
print.cArima<- function(x, type = "norm", horizon = NULL){
if(!is.null(horizon)){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!all(type %in% c("norm", "boot")))
stop("allowed 'type' values are 'norm' and 'boot'")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
## Settings & removing NA's
int.date <- x$int.date
dates <- x$dates
ind <- which(dates[dates >= int.date][!is.na(x$causal.effect)] %in% horizon)
ncol <- 1 + dim(x[[type]]$inf)[2]
summary <- data.frame(matrix(nrow = length(horizon), ncol = ncol))
colnames(summary) <- c("Time horizon", colnames(x[[type]]$inf))
summary[, 1] <- horizon
summary[, 2:ncol] <- x[[type]]$inf[ind, ]
} else {
h <- dim(x[[type]]$inf)[1]
summary <- x[[type]]$inf[h, ]
}
summary
}
#'             in \code{c("norm", "boot")}. Defaults to \code{"norm"}.
#' @param horizon Optional vector with elements of class \code{Date}. If provided, the function
#'                summarizes the point, cumulative and temporal average effects at the given
#'                time horizon(s).
#' @param digits Integer, indicating the number of decimal places to show in the output.
#'
#' @return
#' @export
#'
#' @examples
summary.cArima<- function(x, type = "norm", horizon = NULL, digits = 3){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
# summary
sumryy <- summary(x, type = type, horizon = horizon)
# printing
if(is.numeric(sumryy)){
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[1:5,]), "", as.matrix(sumry[6:10,]), "", as.matrix(sumry[11:15,]))
colnames(obj) <- ""
} else {
sumry <- round(t(sumryy[,-1]), digits = digits)
obj <- rbind(sumry[1:5,], "", sumry[6:10,], "", sumry[11:15,])
colnames(obj) <- paste(sumryy[,1])
}
rownames(obj) <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
noquote(obj)
}
summary.cArima(ce)
summary(ce)
print(ce)
summary(ce)
######################################################################################
######################################################################################
####  Authors:           Fiammetta Menchetti                                      ####
####                     Fabrizio Cipollini                                       ####
####                                                                              ####
####  Date last update: 2021-08-09                                                ####
####                                                                              ####
####  Content:          Summary & print methods for objects of class 'cArima'     ####
####                                                                              ####
####  Main functions :   summary.cArima                                           ####
####                     print.cArima                                             ####
######################################################################################
######################################################################################
#' Summary method for object of class 'cArima'
#'
#' @param x Object of class \code{cArima}.
#' @param type Character string indicating the summary to be produced. Possible values
#'             in \code{c("norm", "boot")}. Defaults to \code{"norm"}.
#' @param horizon Optional vector with elements of class \code{Date}. If provided, the function
#'                summarizes the point, cumulative and temporal average effects at the given
#'                time horizon(s).
#'
#' @return A data frame with as many rows as the dates provided in horizon (if \code{is.null(horizon)},
#'         a single row corresponding to the last date of the post-intervention period) with the
#'         following columns:
#'         \item{tau}{The estimated causal effect at the given time horizon or at the end of analysis
#'                    period if \code{is.null(horizon)}.}
#'         \item{pvalue.tau}{Left-sided (\code{.l}), bidirectional (\code{.b}) and right-sided (\code{.r})
#'                           p-values for \code{tau}.}
#'         \item{sum.tau}{The estimated cumulative causal effect up to the given time horizon or at the end of analysis
#'                        period if \code{is.null(horizon)}.}
#'         \item{pvalue.sum}{Left-sided (\code{.l}), bidirectional (\code{.b}) and right-sided (\code{.r})
#'                           p-values for \code{sum.tau}.}
#'         \item{avg.tau}{The estimated temporal average causal effect up to the given time horizon or at the end of analysis
#'                        period if \code{is.null(horizon)}.}
#'         \item{pvalue.avg}{Left-sided (\code{.l}), bidirectional (\code{.b}) and right-sided (\code{.r})
#'                           p-values for \code{avg.tau}.}
#'         When \code{type = "norm"} additional columns are provided with the estimated standard deviations
#'         for the point, cumulative and temporal average effects under the assumption of Normally distributed residuals.
#' @export
#'
#' @examples
#' ## Example 1
#' # Generating a time series of length 1000 and a vector of dates
#' y <- 0.5*seq(0.5, 250, by = 0.5) + rnorm(500, sd = 6)
#' dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = 500)
#'
#' # Adding a fictional intervention
#' int.date <- as.Date("2015-04-01")
#' horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
#' y.new <- y ; y.new[dates >= int.date] <- y.new[dates >= int.date]*1.25
#'
#' # Causal effect estimation
#' start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
#' ce <- CausalArima(y = ts(y.new, start = start, frequency = 1), auto = TRUE, ic = "aic",
#'                   dates = dates, int.date = int.date, nboot = 1000)
#'
#' # Summary
#' summary(ce, type = "norm")
#' summary(ce, type = "boot", horizon = horizon)
#'
print.cArima<- function(x, type = "norm", horizon = NULL){
if(!is.null(horizon)){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
if(!all(type %in% c("norm", "boot")))
stop("allowed 'type' values are 'norm' and 'boot'")
if(!missing(horizon) && !any(class(horizon) %in% c("Date", "POSIXct", "POSIXlt", "POSIXt")))
stop("`horizon` must be a Date object")
## Settings & removing NA's
int.date <- x$int.date
dates <- x$dates
ind <- which(dates[dates >= int.date][!is.na(x$causal.effect)] %in% horizon)
ncol <- 1 + dim(x[[type]]$inf)[2]
summary <- data.frame(matrix(nrow = length(horizon), ncol = ncol))
colnames(summary) <- c("Time horizon", colnames(x[[type]]$inf))
summary[, 1] <- horizon
summary[, 2:ncol] <- x[[type]]$inf[ind, ]
} else {
h <- dim(x[[type]]$inf)[1]
summary <- x[[type]]$inf[h, ]
}
summary
}
# ------------------------------------------------------------------------------
#' Print method for object of class 'cArima'
#'
#' Format and prints the point, cumulative and temporal average effects (standard errors
#' and critical values) in a nice and clean output.
#'
#' @param x Object of class \code{cArima}.
#' @param type Character string indicating the summary to be produced. Possible values
#'             in \code{c("norm", "boot")}. Defaults to \code{"norm"}.
#' @param horizon Optional vector with elements of class \code{Date}. If provided, the function
#'                summarizes the point, cumulative and temporal average effects at the given
#'                time horizon(s).
#' @param digits Integer, indicating the number of decimal places to show in the output.
#'
#' @return
#' @export
#'
#' @examples
summary.cArima<- function(x, type = "norm", horizon = NULL, digits = 3){
# param checks
if(class(x) != "cArima") stop ("`x` must be an object of class cArima")
# summary
sumryy <- print(x, type = type, horizon = horizon)
# printing
if(is.numeric(sumryy)){
sumry <- as.matrix(round(sumryy, digits = digits))
obj <- rbind(as.matrix(sumry[1:5,]), "", as.matrix(sumry[6:10,]), "", as.matrix(sumry[11:15,]))
colnames(obj) <- ""
} else {
sumry <- round(t(sumryy[,-1]), digits = digits)
obj <- rbind(sumry[1:5,], "", sumry[6:10,], "", sumry[11:15,])
colnames(obj) <- paste(sumryy[,1])
}
rownames(obj) <- c("Point causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Cumulative causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value", "",
"Temporal average causal effect", "Standard error", "Left-sided p-value", "Bidirectional p-value", "Right-sided p-value")
noquote(obj)
}
summary(ce)
print(ce)
library(CausalArima)
install.packages("C:/Users/eugen/OneDrive/Documenti/GitHub/CausalArima",
repos = NULL,
type = "source")
library(CausalArima)
# library(grid)
# library(gridExtra)
# library(ggthemes)
# # library(ggplot2)
# library(tidybayes)
n<-100
# n<-100
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = n)
y <- 1.2 * x1 + rnorm(n)
y[ floor(n*.71):n] <- y[ floor(n*.71):n] +  10 # 10*sin(x1[floor(n*.71):n])
data <- cbind(y, x1)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = n)
# Adding a fictional intervention
int.date <- as.Date("2014-03-161")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y, start = start, frequency = 1), auto = TRUE, ic = "aicc", dates = dates, int.date = int.date,
xreg =x1)
summary(ce)
print(ce)
detach("package:CausalArima", unload = TRUE)
library(CausalArima)
install.packages("C:/Users/eugen/OneDrive/Documenti/GitHub/CausalArima",
repos = NULL,
type = "source")
library(CausalArima)
# library(grid)
# library(gridExtra)
# library(ggthemes)
# # library(ggplot2)
# library(tidybayes)
n<-100
# n<-100
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = n)
y <- 1.2 * x1 + rnorm(n)
y[ floor(n*.71):n] <- y[ floor(n*.71):n] +  10 # 10*sin(x1[floor(n*.71):n])
data <- cbind(y, x1)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = n)
# Adding a fictional intervention
int.date <- as.Date("2014-03-161")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y, start = start, frequency = 1), auto = TRUE, ic = "aicc", dates = dates, int.date = int.date,
xreg =x1)
library(CausalArima)
install.packages("C:/Users/eugen/OneDrive/Documenti/GitHub/CausalArima",
repos = NULL,
type = "source")
library(CausalArima)
# library(grid)
# library(gridExtra)
# library(ggthemes)
# # library(ggplot2)
# library(tidybayes)
n<-100
# n<-100
set.seed(1)
x1 <- 100 + arima.sim(model = list(ar = 0.999), n = n)
y <- 1.2 * x1 + rnorm(n)
y[ floor(n*.71):n] <- y[ floor(n*.71):n] +  10 # 10*sin(x1[floor(n*.71):n])
data <- cbind(y, x1)
dates <- seq.Date(from = as.Date("2014-01-05"), by = "days", length.out = n)
# Adding a fictional intervention
int.date <- as.Date("2014-03-161")
horizon <- c(as.Date("2015-04-10"), as.Date("2015-04-20"))
# Causal effect estimation
start<-as.numeric(strftime(as.Date(dates[1], "%Y-%m-%d"), "%u"))
ce <- CausalArima(y = ts(y, start = start, frequency = 1), auto = TRUE, ic = "aicc", dates = dates, int.date = int.date,
xreg =x1)
fore<-plot(ce, type="forecast")
impact<-plot(ce, type="impact")
residuals<-plot(ce, type="residuals")
table(ce)
print(ce)
fore
impact
residuals
ce$norm$inf
ResultTable(ce)
fore
plot(ce, type="impact")
